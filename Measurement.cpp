/*
KClmtr Object to communicate with Klein K-10/8/1

Copyright (c) 2017 Klein Instruments Inc.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
*/

#include "Measurement.h"
#include <cmath>

#define PI 3.14159625

using namespace KClmtrBase;
using namespace KClmtrBase::KClmtrNative;

static const double nitsToFL = 3.4262591;

//http://www.vendian.org/mncharity/dir3/blackbody/UnstableURLs/bbr_color.html
//temp,  x,y,  u,v,  dtemp,du,dv
#define BLACKBODY_POINTS 289
static double max(double a, double b) {
    if(a > b) {
        return a;
    } else {
        return b;
    }
}
static double min(double a, double b) {
    if(a < b) {
        return a;
    } else {
        return b;
    }
}
static void getXYZfromxyY(double x, double y, double bigY, double &bigX, double &bigZ) {
    //white to XYZ https://en.wikipedia.org/wiki/CIE_1931_color_space
    bigX = bigY / y * x;
    bigZ = bigY / y * (1 - x - y);
}


static const double blackbody[BLACKBODY_POINTS][8] = {
    {1000, 0.652750706121, 0.344461648066, 0.448007144285, 0.354625305998, 100, -0.0222021218653, 0.00184504790319},
    {1100, 0.63875633026, 0.356497587887, 0.42580502242, 0.356470353901, 100, -0.0210458575932, 0.00166088216311},
    {1200, 0.625044836315, 0.367454157429, 0.405915429098, 0.357947070324, 100, -0.0188423239865, 0.00129880539363},
    {1300, 0.611631527571, 0.377232257831, 0.388120374447, 0.359067964688, 100, -0.0168624252713, 0.000953346723806},
    {1400, 0.598521138031, 0.385788171664, 0.372190578556, 0.359853763772, 100, -0.0151062645571, 0.000631058185132},
    {1500, 0.585717954523, 0.393121303492, 0.357907845332, 0.360330081059, 100, -0.0135581822124, 0.000335668782869},
    {1600, 0.573229606621, 0.399264184444, 0.345074214131, 0.360525101337, 100, -0.0121966892743, 6.89218254571e-05},
    {1700, 0.561067411928, 0.404273928605, 0.333514466784, 0.36046792471, 100, -0.010999360335, -0.000168858055385},
    {1800, 0.549245138703, 0.40822485634, 0.323075493461, 0.360187385227, 100, -0.00994506708053, -0.000378346603216},
    {1900, 0.537777290342, 0.411202217136, 0.313624332623, 0.359711231503, 100, -0.00901485016125, -0.000560898523811},
    {2000, 0.526677499154, 0.413296998392, 0.305045793139, 0.359065588179, 100, -0.00819212173433, -0.000718298997766},
    {2100, 0.51595728858, 0.414601787616, 0.297240089154, 0.358274633508, 100, -0.00746256024, -0.000852574296645},
    {2200, 0.505625270643, 0.415207615339, 0.290120672659, 0.357360439586, 100, -0.00681388145267, -0.000965851130005},
    {2300, 0.495686744194, 0.4152016704, 0.283612326249, 0.356342931248, 100, -0.00623557611511, -0.00106025570222},
    {2400, 0.486143615691, 0.414665757649, 0.277649520428, 0.355239928181, 100, -0.0057186558358, -0.00113784438855},
    {2500, 0.476994553778, 0.413675361525, 0.272175014577, 0.35406724247, 100, -0.00525542427255, -0.00120055892141},
    {2600, 0.468235295905, 0.412299184293, 0.267138671883, 0.352838810339, 100, -0.00483927854571, -0.00125020004809},
    {2700, 0.459859039773, 0.410599040965, 0.262496457486, 0.351566842374, 100, -0.00446454024415, -0.00128841470159},
    {2800, 0.451856868673, 0.408630010129, 0.258209591395, 0.350261980935, 100, -0.00412631309266, -0.00131669273739},
    {2900, 0.444218174868, 0.406440758284, 0.2542438313, 0.3489334569, 100, -0.00382036366198, -0.00133637017892},
    {3000, 0.436931057728, 0.40407397278, 0.250568864071, 0.347589240578, 100, -0.00354302155614, -0.00134863666492},
    {3100, 0.429982683052, 0.401566854039, 0.247157788188, 0.34623618357, 100, -0.00329109586936, -0.00135454539956},
    {3200, 0.423359597139, 0.398951630912, 0.243986672332, 0.344880149778, 100, -0.00306180515464, -0.00135502438665},
    {3300, 0.417047994071, 0.396256073693, 0.241034177879, 0.343526134796, 100, -0.00285271858869, -0.00135088809814},
    {3400, 0.411033937842, 0.39350398769, 0.238281235155, 0.342178373582, 100, -0.00266170641556, -0.00134284900541},
    {3500, 0.405303542864, 0.390715676627, 0.235710765048, 0.340840436786, 100, -0.00248689809045, -0.00133152860635},
    {3600, 0.399843117352, 0.38790836984, 0.233307438974, 0.339515316369, 100, -0.00232664682761, -0.00131746772974},
    {3700, 0.394639274399, 0.385096610631, 0.231057471392, 0.338205501326, 100, -0.00217949948892, -0.00130113600272},
    {3800, 0.389679015549, 0.382292605432, 0.228948439996, 0.336913044364, 100, -0.00204417093858, -0.00128294043916},
    {3900, 0.384949791309, 0.379506535014, 0.226969129515, 0.335639620448, 100, -0.0019195221438, -0.00126323315477},
    {4000, 0.380439542657, 0.376746829915, 0.225109395708, 0.334386578054, 100, -0.00180454142628, -0.00124231824503},
    {4100, 0.37613672711, 0.374020412808, 0.223360046663, 0.333154983958, 100, -0.00169832837145, -0.00122045788058},
    {4200, 0.372030332401, 0.371332910799, 0.221712738966, 0.331945662293, 100, -0.00160007998567, -0.00119787768353},
    {4300, 0.368109880388, 0.368688840652, 0.220159886691, 0.330759228591, 100, -0.00150907875964, -0.00117477145229},
    {4400, 0.364365423371, 0.366091769896, 0.218694581446, 0.329596119389, 100, -0.00142468235234, -0.00115130530181},
    {4500, 0.360787534618, 0.363544456566, 0.217310521987, 0.328456617987, 100, -0.00134631465587, -0.00112762128347},
    {4600, 0.357367294585, 0.361048970162, 0.216001952135, 0.327340876822, 100, -0.00127345803989, -0.0011038405446},
    {4700, 0.354096274028, 0.358606796136, 0.214763605907, 0.326248936898, 100, -0.0012056466056, -0.00108006608269},
    {4800, 0.350966514972, 0.356218926001, 0.213590658923, 0.325180744656, 100, -0.00114246030603, -0.00105638514399},
    {4900, 0.3479705103, 0.353885934944, 0.212478685295, 0.32413616661, 100, -0.00108351981096, -0.00103287131106},
    {5000, 0.345101182571, 0.351608048576, 0.211423619301, 0.323115002034, 100, -0.00102848201325, -0.001009586319},
    {5100, 0.342351862535, 0.349385200272, 0.210421721268, 0.322116993972, 100, -0.000977036088984, -0.000986581635022},
    {5200, 0.339716267709, 0.347217080378, 0.209469547123, 0.321141838764, 100, -0.000928900036481, -0.000963899832331},
    {5300, 0.337188481278, 0.345103178381, 0.208563921195, 0.320189194307, 100, -0.000883817630298, -0.000941575784986},
    {5400, 0.334762931531, 0.34304281902, 0.207701911863, 0.319258687194, 100, -0.000841555735564, -0.000919637707259},
    {5500, 0.332434371979, 0.341035193155, 0.206880809724, 0.318349918893, 100, -0.00080190193572, -0.000898108057866},
    {5600, 0.330197862243, 0.339079384131, 0.206098107991, 0.317462471078, 100, -0.000764662433403, -0.000877004326823},
    {5700, 0.328048749791, 0.337174390258, 0.205351484857, 0.316595910239, 100, -0.000729660189777, -0.0008563397203},
    {5800, 0.325982652548, 0.335319143944, 0.204638787612, 0.315749791638, 100, -0.000696733272447, -0.000836123756847},
    {5900, 0.323995442402, 0.33351252796, 0.203958018313, 0.314923662725, 100, -0.000665733386099, -0.00081636278656},
    {6000, 0.322083229605, 0.331753389218, 0.20330732084, 0.314117066065, 100, -0.000636524563555, -0.000797060443221},
    {6100, 0.320242348049, 0.330040550433, 0.202684969185, 0.313329541839, 100, -0.000608981997844, -0.000778218038127},
    {6200, 0.318469341408, 0.328372819948, 0.202089356844, 0.312560629989, 100, -0.000582990998501, -0.000759834903129},
    {6300, 0.3167609501, 0.326748999995, 0.201518987188, 0.311809872033, 100, -0.000558446057431, -0.000741908689433},
    {6400, 0.31511409905, 0.325167893598, 0.200972464729, 0.31107681261, 100, -0.000535250011615, -0.000724435627849},
    {6500, 0.313525886214, 0.323628310333, 0.200448487165, 0.310361000777, 50, -0.000264553835978, -0.000361442181478},
    {6501, 0.313510290808, 0.323613120191, 0.200443357057, 0.310353928247, 1, -5.1290424801e-06, -7.07169036421e-06},
    {6502, 0.313494700988, 0.323597934082, 0.20043822908, 0.310346857396, 1, -5.12691204778e-06, -7.07001086592e-06},
    {6503, 0.313479116751, 0.323582752005, 0.200433103233, 0.310339788225, 1, -5.12478278887e-06, -7.06833181013e-06},
    {6504, 0.313463538095, 0.323567573959, 0.200427979515, 0.310332720733, 1, -5.122654703e-06, -7.0666531963e-06},
    {6505, 0.313447965017, 0.323552399942, 0.200422857924, 0.310325654919, 1, -5.12052778903e-06, -7.06497502462e-06},
    {6506, 0.313432397514, 0.323537229954, 0.200417738459, 0.310318590783, 1, -5.11840204621e-06, -7.06329729511e-06},
    {6507, 0.313416835583, 0.323522063993, 0.20041262112, 0.310311528324, 1, -5.11627747343e-06, -7.06162000774e-06},
    {6508, 0.313401279223, 0.323506902058, 0.200407505904, 0.310304467542, 1, -5.11415407016e-06, -7.05994316247e-06},
    {6509, 0.31338572843, 0.323491744148, 0.200402392811, 0.310297408438, 1, -5.1120318362e-06, -7.0582667589e-06},
    {6510, 0.313370183201, 0.323476590262, 0.20039728184, 0.310290351009, 45, -0.000228277332681, -0.000317708669391},
    {6600, 0.311993571825, 0.322129071076, 0.199945838146, 0.309661991099, 95, -0.000466950583153, -0.000655503228552},
    {6700, 0.310514568319, 0.320669011921, 0.199463380674, 0.308979344552, 100, -0.000472893531692, -0.00067468091477},
    {6800, 0.309086430916, 0.319246987354, 0.199000051083, 0.308312629269, 100, -0.000454263569718, -0.000658961701967},
    {6900, 0.307706848802, 0.317861872808, 0.198554853535, 0.307661421148, 100, -0.000436598046131, -0.000643662467858},
    {7000, 0.30637363689, 0.316512566694, 0.19812685499, 0.307025304334, 100, -0.000419836467233, -0.000628774772632},
    {7100, 0.305084728113, 0.315197991969, 0.1977151806, 0.306403871603, 100, -0.00040392275458, -0.000614289840464},
    {7200, 0.303838166219, 0.313917097322, 0.197319009481, 0.305796724653, 100, -0.000388804878516, -0.000600198643937},
    {7300, 0.302632099046, 0.312668858029, 0.196937570843, 0.305203474315, 100, -0.000374434525807, -0.000586491976995},
    {7400, 0.301464772225, 0.311452276537, 0.19657014043, 0.304623740699, 100, -0.000360766797851, -0.000573160517845},
    {7500, 0.300334523305, 0.310266382805, 0.196216037248, 0.304057153279, 100, -0.000347759936332, -0.000560194883058},
    {7600, 0.299239776254, 0.309110234452, 0.195874620557, 0.303503350933, 100, -0.00033537507357, -0.000547585673964},
    {7700, 0.298179036321, 0.307982916741, 0.1955452871, 0.302961981931, 100, -0.000323576005096, -0.000535323516302},
    {7800, 0.297150885236, 0.306883542421, 0.195227468547, 0.3024327039, 100, -0.000312328982247, -0.000523399093962},
    {7900, 0.296153976711, 0.305811251453, 0.194920629136, 0.301915183743, 100, -0.000301602522848, -0.000511803177547},
    {8000, 0.295187032245, 0.304765210652, 0.194624263501, 0.301409097545, 100, -0.000291367238224, -0.000500526648428},
    {8100, 0.294248837185, 0.303744613239, 0.194337894659, 0.300914130446, 100, -0.000281595674981, -0.000489560518828},
    {8200, 0.293338237054, 0.302748678341, 0.194061072151, 0.300429976507, 100, -0.00027226217016, -0.000478895948456},
    {8300, 0.292454134101, 0.30177665044, 0.193793370319, 0.299956338549, 100, -0.000263342718523, -0.00046852425813},
    {8400, 0.291595484075, 0.300827798778, 0.193534386714, 0.299492927991, 100, -0.000254814850831, -0.000458436940751},
    {8500, 0.290761293209, 0.299901416744, 0.193283740617, 0.299039464668, 100, -0.000246657522119, -0.000448625670005},
    {8600, 0.28995061538, 0.298996821231, 0.19304107167, 0.298595676651, 100, -0.000238851009054, -0.000439082307055},
    {8700, 0.289162549462, 0.298113351984, 0.192806038599, 0.298161300054, 100, -0.000231376815563, -0.000429798905512},
    {8800, 0.288396236835, 0.297250370937, 0.192578318039, 0.29773607884, 100, -0.000224217585992, -0.000420767714899},
    {8900, 0.287650859047, 0.296407261552, 0.192357603427, 0.297319764624, 100, -0.00021735702513, -0.000411981182823},
    {9000, 0.286925635629, 0.295583428147, 0.192143603988, 0.296912116474, 100, -0.000210779824506, -0.000403431956029},
    {9100, 0.286219822032, 0.294778295246, 0.191936043778, 0.296512900712, 100, -0.000204471594407, -0.000395112880489},
    {9200, 0.2855327077, 0.293991306917, 0.1917346608, 0.296121890713, 100, -0.000198418801132, -0.000387017000671},
    {9300, 0.284863614254, 0.29322192613, 0.191539206176, 0.295738866711, 100, -0.000192608709027, -0.000379137558113},
    {9400, 0.284211893785, 0.292469634126, 0.191349443382, 0.295363615597, 100, -0.000187029326922, -0.000371467989395},
    {9500, 0.283576927254, 0.291733929794, 0.191165147522, 0.294995930732, 100, -0.000181669358569, -0.000364001923613},
    {9600, 0.282958122981, 0.291014329063, 0.190986104664, 0.29463561175, 100, -0.000176518156774, -0.000356733179441},
    {9700, 0.282354915225, 0.290310364312, 0.190812111209, 0.294282464373, 100, -0.000171565680919, -0.00034965576184},
    {9800, 0.281766762852, 0.289621583789, 0.190642973303, 0.293936300226, 100, -0.000166802457577, -0.00034276385849},
    {9900, 0.281193148074, 0.288947551055, 0.190478506294, 0.293596936656, 100, -0.000162219543999, -0.000336051835991},
    {10000, 0.280633575266, 0.288287844433, 0.190318534215, 0.293264196554, 150, -0.000233547367023, -0.000489515821485},
    {10200, 0.279554677231, 0.287009793488, 0.190011411559, 0.292617905013, 200, -0.000299090201901, -0.000634041693125},
    {10400, 0.278526506115, 0.285784333155, 0.189720353811, 0.291996113168, 200, -0.000283595458462, -0.000610159168595},
    {10600, 0.277545788708, 0.284608569732, 0.189444220643, 0.291397586676, 200, -0.000269191214927, -0.000587474399869},
    {10800, 0.276609513666, 0.283479799026, 0.189181971381, 0.290821164368, 200, -0.000255782912846, -0.00056591653322},
    {11000, 0.275714906922, 0.282395492781, 0.188932654817, 0.290265753609, 200, -0.000243285591319, -0.000545419220024},
    {11200, 0.274859409713, 0.281353286043, 0.188695400198, 0.289730325928, 200, -0.00023162278166, -0.000525920348306},
    {11400, 0.274040658916, 0.280350965448, 0.188469409254, 0.289213912913, 200, -0.000220725543565, -0.000507361782677},
    {11600, 0.27325646943, 0.279386458358, 0.188253949111, 0.288715602363, 200, -0.000210531622942, -0.000489689114416},
    {11800, 0.272504818356, 0.278457822809, 0.188048346008, 0.288234534684, 200, -0.000200984714565, -0.000472851422834},
    {12000, 0.271783830781, 0.2775632382, 0.187851979682, 0.287769899517, 200, -0.000192033815241, -0.000456801048584},
    {12200, 0.271091766983, 0.276700996693, 0.187664278377, 0.287320932587, 200, -0.000183632655316, -0.00044149337921},
    {12400, 0.270427010895, 0.275869495254, 0.187484714371, 0.286886912759, 200, -0.000175739198094, -0.000426886646984},
    {12600, 0.269788059701, 0.2750672283, 0.187312799981, 0.286467159293, 200, -0.00016831519828, -0.000412941738839},
    {12800, 0.269173514422, 0.274292780902, 0.187148083975, 0.286061029281, 200, -0.000161325811796, -0.000399622018112},
    {13000, 0.268582071407, 0.273544822506, 0.186990148357, 0.285667915257, 200, -0.000154739250412, -0.000386893157666},
    {13200, 0.268012514615, 0.272822101124, 0.186838605474, 0.285287242966, 200, -0.000148526475533, -0.000374722983918},
    {13400, 0.26746370862, 0.272123437968, 0.186693095406, 0.284918469289, 200, -0.000142660926264, -0.000363081331251},
    {13600, 0.26693459225, 0.271447722482, 0.186553283622, 0.284561080303, 200, -0.000137118277541, -0.000351939906259},
    {13800, 0.266424172808, 0.270793907755, 0.186418858851, 0.284214589476, 200, -0.000131876224659, -0.000341272161267},
    {14000, 0.265931520807, 0.270161006268, 0.186289531172, 0.283878535981, 200, -0.000126914291034, -0.000331053176587},
    {14200, 0.265455765169, 0.269548085961, 0.186165030269, 0.283552483123, 200, -0.000122213656449, -0.000321259550947},
    {14400, 0.264996088844, 0.268954266593, 0.186045103859, 0.283236016879, 200, -0.000117757003362, -0.000311869299583},
    {14600, 0.264551724812, 0.268378716363, 0.185929516262, 0.282928744524, 200, -0.000113528379205, -0.000302861759486},
    {14800, 0.264121952417, 0.26782064878, 0.185818047101, 0.28263029336, 200, -0.000109513072821, -0.000294217501306},
    {15000, 0.263706094021, 0.267279319769, 0.185710490117, 0.282340309521, 200, -0.000105697503452, -0.00028591824748},
    {15200, 0.263303511926, 0.26675402497, 0.185606652094, 0.282058456865, 200, -0.00010206912087, -0.000277946796129},
    {15400, 0.262913605557, 0.266244097243, 0.185506351875, 0.281784415929, 200, -9.8616315406e-05, -0.00027028695032},
    {15600, 0.262535808875, 0.265748904347, 0.185409419463, 0.281517882964, 200, -9.53283368116e-05, -0.000262923452323},
    {15800, 0.262169587992, 0.265267846778, 0.185315695201, 0.281258569024, 200, -9.21952209816e-05, -0.000255841922493},
    {16000, 0.261814438983, 0.264800355768, 0.185225029021, 0.281006199119, 200, -8.9207723702e-05, -0.000249028802444},
    {16200, 0.261469885865, 0.264345891415, 0.185137279754, 0.28076051142, 200, -8.63572606811e-05, -0.000242471302202},
    {16400, 0.261135478738, 0.263903940945, 0.1850523145, 0.280521256515, 200, -8.36358531984e-05, -0.000236157351066},
    {16600, 0.260810792068, 0.263474017094, 0.184970008048, 0.280288196717, 200, -8.10360787966e-05, -0.000230075551869},
    {16800, 0.260495423099, 0.263055656601, 0.184890242342, 0.280061105411, 200, -7.85510264946e-05, -0.000224215138432},
    {17000, 0.260188990385, 0.262648418799, 0.184812905995, 0.279839766441, 200, -7.61742560635e-05, -0.00021856593595},
    {17200, 0.259891132435, 0.262251884305, 0.18473789383, 0.279623973539, 200, -7.38997609591e-05, -0.000213118324105},
    {17400, 0.259601506456, 0.261865653791, 0.184665106473, 0.279413529792, 200, -7.17219345435e-05, -0.000207863202706},
    {17600, 0.259319787185, 0.261489346844, 0.184594449961, 0.279208247134, 200, -6.96355392787e-05, -0.000202791959675},
    {17800, 0.259045665812, 0.261122600894, 0.184525835394, 0.279007945873, 200, -6.76356785967e-05, -0.000197896441203},
    {18000, 0.258778848973, 0.260765070215, 0.184459178604, 0.278812454251, 200, -6.57177711897e-05, -0.000193168923919},
    {18200, 0.258519057821, 0.260416424985, 0.184394399852, 0.278621608025, 200, -6.38775274919e-05, -0.000188602088933},
    {18400, 0.258266027154, 0.260076350419, 0.184331423549, 0.278435250073, 200, -6.21109281422e-05, -0.000184188997608},
    {18600, 0.258019504616, 0.259744545938, 0.184270177996, 0.27825323003, 200, -6.04142042462e-05, -0.000179923068943},
    {18800, 0.257779249938, 0.259420724409, 0.18421059514, 0.278075403936, 200, -5.87838192666e-05, -0.000175798058449},
    {19000, 0.257545034242, 0.259104611417, 0.184152610357, 0.277901633913, 200, -5.7216452396e-05, -0.000171808038414},
    {19200, 0.257316639387, 0.258795944594, 0.184096162236, 0.277731787859, 200, -5.57089832775e-05, -0.000167947379453},
    {19400, 0.257093857361, 0.25849447298, 0.18404119239, 0.277565739154, 200, -5.42584779478e-05, -0.000164210733258},
    {19600, 0.25687648971, 0.258199956431, 0.18398764528, 0.277403366392, 200, -5.28621758987e-05, -0.000160593016461},
    {19800, 0.256664347008, 0.257912165055, 0.183935468039, 0.277244553121, 200, -5.15174781549e-05, -0.000157089395526},
    {20000, 0.256457248356, 0.257630878685, 0.183884610323, 0.277089187601, 350, -8.62691927968e-05, -0.000264694413651},
    {20500, 0.25596045391, 0.256954759374, 0.183762929653, 0.276715164294, 500, -0.000118049378468, -0.000364360076629},
    {21000, 0.255491625331, 0.256314936989, 0.183648511566, 0.276360467448, 500, -0.000111094179817, -0.000345741298129},
    {21500, 0.255048523262, 0.255708648686, 0.183540741293, 0.276023681698, 500, -0.000104720738295, -0.000328472245235},
    {22000, 0.254629136537, 0.255133398269, 0.18343907009, 0.275703522957, 500, -9.88672651946e-05, -0.000312428892319},
    {22500, 0.254231654313, 0.254586925477, 0.183343006763, 0.275398823913, 500, -9.34798206294e-05, -0.000297500803754},
    {23000, 0.253854442126, 0.254067179328, 0.183252110449, 0.27510852135, 500, -8.85111646472e-05, -0.000283589425451},
    {23500, 0.253496021264, 0.253572294937, 0.183165984434, 0.274831645062, 500, -8.39197972984e-05, -0.000270606616262},
    {24000, 0.25315505092, 0.25310057328, 0.183084270854, 0.274567308117, 500, -7.96691533759e-05, -0.000258473382393},
    {24500, 0.252830312717, 0.252650463508, 0.183006646127, 0.274314698297, 500, -7.57269243063e-05, -0.000247118784071},
    {25000, 0.252520697248, 0.25222054743, 0.182932817005, 0.274073070549, 500, -7.20644850086e-05, -0.000236478988736},
    {25500, 0.252225192326, 0.251809525878, 0.182862517157, 0.27384174032, 500, -6.86564077434e-05, -0.000226496449165},
    {26000, 0.251942872709, 0.251416206687, 0.18279550419, 0.273620077651, 500, -6.54800483525e-05, -0.000217119188407},
    {26500, 0.251672891081, 0.251039494087, 0.18273155706, 0.273407501943, 500, -6.25151929464e-05, -0.000208300176212},
    {27000, 0.251414470127, 0.250678379312, 0.182670473804, 0.273203477299, 500, -5.97437552537e-05, -0.000199996784073},
    {27500, 0.251166895538, 0.250331932262, 0.18261206955, 0.273007508375, 500, -5.71495165848e-05, -0.000192170307912},
    {28000, 0.250929509834, 0.249999294106, 0.182556174771, 0.272819136683, 500, -5.47179017418e-05, -0.000184785549155},
    {28500, 0.25070170689, 0.249679670681, 0.182502633746, 0.272637937277, 500, -5.24357853685e-05, -0.000177810446286},
    {29000, 0.250482927076, 0.249372326604, 0.1824513032, 0.27246351579, 500, -5.02913241448e-05, -0.000171215750147},
    {29500, 0.250272652935, 0.249076580015, 0.182402051098, 0.272295505776, 500, -4.82738109899e-05, -0.000164974737237},
    {30000, 0.250070405326, 0.248791797855, 0.182354755578, 0.272133566316, 500, -4.63735480677e-05, -0.000159062956076},
    {30500, 0.249875739985, 0.248517391638, 0.182309304002, 0.271977379864, 500, -4.45817358957e-05, -0.000153458002407},
    {31000, 0.249688244437, 0.248252813648, 0.182265592106, 0.271826650311, 500, -4.2890376285e-05, -0.00014813931959},
    {31500, 0.249507535237, 0.247997553512, 0.182223523249, 0.271681101225, 500, -4.12921871901e-05, -0.000143088021062},
    {32000, 0.249333255483, 0.247751135109, 0.182183007732, 0.271540474269, 500, -3.97805278404e-05, -0.000138286732144},
    {32500, 0.249165072582, 0.247513113782, 0.182143962194, 0.271404527761, 500, -3.83493327707e-05, -0.000133719448854},
    {33000, 0.249002676239, 0.247283073808, 0.182106309066, 0.271273035371, 500, -3.69930535686e-05, -0.00012937141169},
    {33500, 0.24884577663, 0.247060626114, 0.182069976086, 0.271145784937, 500, -3.57066073362e-05, -0.000125228992616},
    {34000, 0.248694102765, 0.246845406194, 0.182034895852, 0.271022577386, 500, -3.44853309975e-05, -0.000121279593719},
    {34500, 0.248547400991, 0.246637072226, 0.182001005424, 0.27090322575, 500, -3.33249407139e-05, -0.00011751155618},
    {35000, 0.248405433641, 0.246435303351, 0.18196824597, 0.270787554273, 500, -3.22214957714e-05, -0.000113914078406},
    {35500, 0.248267977808, 0.246239798108, 0.181936562433, 0.270675397593, 500, -3.11713663854e-05, -0.000110477142276},
    {36000, 0.248134824224, 0.246050273004, 0.181905903238, 0.270566599989, 500, -3.01712049509e-05, -0.000107191446622},
    {36500, 0.248005776241, 0.245866461212, 0.181876220023, 0.2704610147, 500, -2.92179203249e-05, -0.000104048347139},
    {37000, 0.247880648905, 0.245688111371, 0.181847467397, 0.270358503295, 500, -2.83086547824e-05, -0.000101039802034},
    {37500, 0.247759268103, 0.245514986497, 0.181819602713, 0.270258935096, 500, -2.74407633378e-05, -9.81583228091e-05},
    {38000, 0.247641469788, 0.245346862974, 0.18179258587, 0.270162186649, 500, -2.66117951569e-05, -9.53969296218e-05},
    {38500, 0.247527099268, 0.24518352964, 0.181766379123, 0.270068141236, 500, -2.58194768228e-05, -9.27491107593e-05},
    {39000, 0.247416010554, 0.245024786934, 0.181740946917, 0.269976688427, 500, -2.50616972527e-05, -9.02087857978e-05},
    {39500, 0.247308065759, 0.244870446122, 0.181716255729, 0.269887723665, 500, -2.43364940781e-05, -8.77702720716e-05},
    {40000, 0.247203134552, 0.244720328573, 0.181692273928, 0.269801147883, 500, -2.36420413333e-05, -8.54282541191e-05},
    {40500, 0.247101093645, 0.244574265104, 0.181668971646, 0.269716867157, 500, -2.2976638307e-05, -8.31777558123e-05},
    {41000, 0.247001826332, 0.244432095365, 0.181646320652, 0.269634792372, 500, -2.23386994391e-05, -8.10141149027e-05},
    {41500, 0.246905222059, 0.244293667276, 0.181624294247, 0.269554838927, 500, -2.17267451483e-05, -7.89329597496e-05},
    {42000, 0.246811176021, 0.244158836505, 0.181602867162, 0.269476926452, 500, -2.11393934966e-05, -7.69301880234e-05},
    {42500, 0.246719588803, 0.244027465983, 0.18158201546, 0.269400978551, 500, -2.05753526048e-05, -7.50019471934e-05},
    {43000, 0.246630366036, 0.24389942546, 0.181561716456, 0.269326922558, 500, -2.00334137421e-05, -7.31446166323e-05},
    {43500, 0.246543418082, 0.243774591084, 0.181541948633, 0.269254689318, 500, -1.95124450233e-05, -7.13547911897e-05},
    {44000, 0.246458659745, 0.243652845023, 0.181522691566, 0.269184212975, 500, -1.90113856532e-05, -6.96292660976e-05},
    {44500, 0.246376010004, 0.243534075099, 0.181503925861, 0.269115430785, 500, -1.85292406661e-05, -6.79650230854e-05},
    {45000, 0.246295391754, 0.243418174462, 0.181485633085, 0.269048282929, 500, -1.80650761115e-05, -6.63592175986e-05},
    {45500, 0.246216731582, 0.243305041273, 0.181467795709, 0.26898271235, 500, -1.76180146412e-05, -6.48091670207e-05},
    {46000, 0.246139959545, 0.243194578421, 0.181450397056, 0.268918664595, 500, -1.71872314647e-05, -6.33123398098e-05},
    {46500, 0.24606500897, 0.243086693252, 0.181433421246, 0.268856087671, 500, -1.67719506373e-05, -6.18663454711e-05},
    {47000, 0.245991816266, 0.242981297318, 0.181416853154, 0.268794931904, 500, -1.63714416455e-05, -6.04689252929e-05},
    {47500, 0.245920320749, 0.242878306141, 0.181400678363, 0.26873514982, 500, -1.59850162679e-05, -5.91179437796e-05},
    {48000, 0.24585046448, 0.242777638996, 0.181384883122, 0.268676696017, 500, -1.56120256878e-05, -5.78113807237e-05},
    {48500, 0.245782192111, 0.242679218706, 0.181369454311, 0.268619527058, 500, -1.52518578275e-05, -5.65473238639e-05},
    {49000, 0.245715450741, 0.242582971451, 0.181354379406, 0.268563601369, 500, -1.49039348931e-05, -5.53239620789e-05},
    {49500, 0.245650189787, 0.242488826586, 0.181339646442, 0.268508879134, 500, -1.45677111055e-05, -5.41395790744e-05},
    {50000, 0.245586360855, 0.242396716477, 0.181325243984, 0.268455322211, 750, -2.11295543731e-05, -7.86597853471e-05},
    {51000, 0.245462815752, 0.242218344092, 0.181297387333, 0.268351559564, 1000, -2.72582248744e-05, -0.000101641834697},
    {52000, 0.24534446785, 0.242047367643, 0.181270727534, 0.268252038541, 1000, -2.60989236615e-05, -9.7526788759e-05},
    {53000, 0.245230997874, 0.241883339492, 0.181245189486, 0.268156505986, 1000, -2.5011662107e-05, -9.36550839292e-05},
    {54000, 0.245122112043, 0.2417258472, 0.18122070421, 0.268064728374, 1000, -2.39906197311e-05, -9.00080145019e-05},
    {55000, 0.245017539584, 0.241574510156, 0.181197208246, 0.267976489957, 1000, -2.30305498489e-05, -8.65686289679e-05},
    {56000, 0.244917030537, 0.241428976577, 0.18117464311, 0.267891591116, 1000, -2.21267132547e-05, -8.33215371747e-05},
    {57000, 0.244820353799, 0.241288920845, 0.18115295482, 0.267809846883, 1000, -2.12748206496e-05, -8.02527416671e-05},
    {58000, 0.244727295386, 0.241154041129, 0.181132093469, 0.267731085632, 1000, -2.04709825214e-05, -7.73494898152e-05},
    {59000, 0.244637656883, 0.241024057263, 0.181112012855, 0.267655147903, 1000, -1.97116653996e-05, -7.46001438664e-05},
    {60000, 0.244551254063, 0.240898708842, 0.181092670138, 0.267581885345, 1000, -1.89936535782e-05, -7.19940664903e-05},
    {61000, 0.244467915637, 0.240777753522, 0.181074025547, 0.26751115977, 1000, -1.83140155407e-05, -6.9521519747e-05},
    {62000, 0.244387482152, 0.240660965485, 0.181056042107, 0.267442842305, 1000, -1.76700744361e-05, -6.7173575718e-05},
    {63000, 0.244309804982, 0.240548134059, 0.181038685399, 0.267376812619, 1000, -1.70593820688e-05, -6.49420372885e-05},
    {64000, 0.244234745433, 0.240439062477, 0.181021923343, 0.267312958231, 1000, -1.64796959221e-05, -6.28193677918e-05},
    {65000, 0.244162173927, 0.24033356675, 0.181005726007, 0.267251173883, 1000, -1.59289588249e-05, -6.0798628404e-05},
    {66000, 0.244091969268, 0.240231474651, 0.180990065425, 0.267191360974, 1000, -1.54052809212e-05, -5.88734223283e-05},
    {67000, 0.244024017978, 0.240132624796, 0.180974915445, 0.267133427038, 1000, -1.49069236445e-05, -5.70378449482e-05},
    {68000, 0.243958213693, 0.240036865804, 0.180960251578, 0.267077285284, 1000, -1.44322854541e-05, -5.5286439229e-05},
    {69000, 0.243894456618, 0.239944055536, 0.180946050874, 0.26702285416, 1000, -1.39798891094e-05, -5.36141557487e-05},
    {70000, 0.243832653026, 0.239854060406, 0.1809322918, 0.266970056972, 1000, -1.35483702986e-05, -5.20163168206e-05},
    {71000, 0.24377271481, 0.239766754748, 0.180918954133, 0.266918821526, 1000, -1.3136467464e-05, -5.04885842336e-05},
    {72000, 0.243714559063, 0.239682020237, 0.180906018865, 0.266869079804, 1000, -1.27430126731e-05, -4.90269302037e-05},
    {73000, 0.243658107705, 0.239599745367, 0.180893468108, 0.266820767666, 1000, -1.23669234226e-05, -4.76276111757e-05},
    {74000, 0.243603287139, 0.239519824965, 0.180881285018, 0.266773824581, 1000, -1.20071952663e-05, -4.62871441618e-05},
    {75000, 0.243550027929, 0.239442159751, 0.180869453717, 0.266728193378, 1000, -1.16628951712e-05, -4.50022853395e-05},
    {76000, 0.243498264518, 0.239366655929, 0.180857959228, 0.266683820011, 1000, -1.13331555251e-05, -4.37700106676e-05},
    {77000, 0.243447934956, 0.239293224819, 0.180846787406, 0.266640653356, 1000, -1.10171687188e-05, -4.25874983065e-05},
    {78000, 0.243398980658, 0.23922178251, 0.18083592489, 0.266598645014, 1000, -1.07141822455e-05, -4.14521126517e-05},
    {79000, 0.24335134618, 0.239152249549, 0.180825359042, 0.266557749131, 1000, -1.04234942589e-05, -4.03613898164e-05},
    {80000, 0.243304979009, 0.239084550645, 0.180815077902, 0.266517922235, 1000, -1.01444495446e-05, -3.93130244137e-05},
    {81000, 0.243259829378, 0.239018614402, 0.180805070143, 0.266479123082, 1000, -9.8764358565e-06, -3.83048575081e-05},
    {82000, 0.243215850081, 0.238954373075, 0.18079532503, 0.26644131252, 1000, -9.61888058632e-06, -3.73348656197e-05},
    {83000, 0.243172996318, 0.238891762333, 0.180785832382, 0.266404453351, 1000, -9.37124773059e-06, -3.64011506766e-05},
    {84000, 0.24313122554, 0.238830721054, 0.180776582535, 0.266368510218, 1000, -9.13303512159e-06, -3.55019308257e-05},
    {85000, 0.243090497311, 0.238771191123, 0.180767566311, 0.266333449489, 1000, -8.9037719017e-06, -3.4635532016e-05},
    {86000, 0.24305077318, 0.238713117254, 0.180758774991, 0.266299239154, 1000, -8.68301621404e-06, -3.38003802838e-05},
    {87000, 0.243012016558, 0.238656446817, 0.180750200279, 0.266265848729, 1000, -8.47035308807e-06, -3.29949946747e-05},
    {88000, 0.242974192608, 0.23860112968, 0.180741834285, 0.266233249165, 1000, -8.26539250458e-06, -3.22179807375e-05},
    {89000, 0.242937268144, 0.238547118069, 0.180733669494, 0.266201412767, 1000, -8.0677676188e-06, -3.14680245465e-05},
    {90000, 0.24290121153, 0.238494366422, 0.180725698749, 0.266170313116, 1000, -7.87713313022e-06, -3.0743887196e-05},
    {91000, 0.242865992595, 0.238442831272, 0.180717915228, 0.266139924993, 1000, -7.69316378506e-06, -3.00443997284e-05},
    {92000, 0.242831582548, 0.238392471121, 0.180710312422, 0.266110224316, 1000, -7.51555299722e-06, -2.93684584593e-05},
    {93000, 0.242797953899, 0.238343246336, 0.180702884122, 0.266081188076, 1000, -7.34401157912e-06, -2.87150206603e-05},
    {94000, 0.242765080386, 0.23829511904, 0.180695624399, 0.266052794275, 1000, -7.1782665729e-06, -2.80831005711e-05},
    {95000, 0.24273293691, 0.238248053019, 0.180688527589, 0.266025021875, 1000, -7.01806017032e-06, -2.74717657123e-05},
    {96000, 0.242701499471, 0.238202013633, 0.180681588278, 0.265997850744, 1000, -6.86314871659e-06, -2.68801334733e-05},
    {97000, 0.242670745104, 0.238156967729, 0.180674801291, 0.265971261608, 1000, -6.71330178949e-06, -2.63073679523e-05},
    {98000, 0.242640651832, 0.238112883563, 0.180668161675, 0.265945236008, 1000, -6.56830134703e-06, -2.57526770257e-05},
    {99000, 0.242611198606, 0.238069730727, 0.180661664688, 0.265919756254, 1000, -6.42794094008e-06, -2.52153096311e-05},
    {100000, 0.242582365259, 0.238027480079, 0.180655305793, 0.265894805388, 10500, -5.50615032613e-05, -0.000216935573331},
    {120000, 0.242111009594, 0.237335943252, 0.180551541682, 0.265485885107, 20000, -8.82789921634e-05, -0.000348894327777},
    {140000, 0.241779382767, 0.236848462939, 0.180478747809, 0.265197016733, 20000, -6.33373618176e-05, -0.000251873127009},
    {160000, 0.241533414835, 0.236486399931, 0.180424866958, 0.264982138853, 20000, -4.76843769381e-05, -0.000190474211861},
    {180000, 0.241343731614, 0.236206899815, 0.180383379055, 0.264816068309, 20000, -3.72079699494e-05, -0.000149129272725},
    {200000, 0.241193006034, 0.235984626522, 0.180350451018, 0.264683880308, 35000, -4.58077816145e-05, -0.00018431147349},
    {250000, 0.240923980147, 0.235587508613, 0.180291763491, 0.264447445362, 50000, -4.86996958062e-05, -0.000196490070483},
    {300000, 0.240746253301, 0.235324888806, 0.180253051627, 0.264290900167, 50000, -3.30811800331e-05, -0.000133916610447},
    {350000, 0.240620098483, 0.235138344725, 0.180225601131, 0.264179612141, 50000, -2.39645588187e-05, -9.72317518776e-05},
    {400000, 0.240525915081, 0.234999006367, 0.180205122509, 0.264096436663, 50000, -1.81709773426e-05, -7.38475194185e-05},
    {450000, 0.240452917336, 0.23489096974, 0.180189259177, 0.264031917102, 50000, -1.42567486651e-05, -5.80132009023e-05},
    {500000, 0.240394680227, 0.234804753177, 0.180176609012, 0.263980410261, 75000, -1.57790555578e-05, -6.42927624941e-05},
    {600000, 0.240307592715, 0.234675782923, 0.180157701066, 0.263903331577, 100000, -1.61821586376e-05, -6.60006607842e-05},
    {700000, 0.240245584128, 0.234583921843, 0.180144244695, 0.26384840894, 100000, -1.17608790906e-05, -4.80207455441e-05},
    {800000, 0.240199185181, 0.234515168516, 0.180134179307, 0.263807290086, 100000, -8.93905907401e-06, -3.65284073534e-05},
    {900000, 0.240163160759, 0.234461778142, 0.180126366576, 0.263775352125, 100000, -7.02645596493e-06, -2.87304955688e-05},
    {1000000, 0.240134381293, 0.234419119038, 0.180120126395, 0.263749829095, 550000, -1.71056259365e-05, -7.00378024469e-05},
    {2000000, 0.240005313991, 0.234227738224, 0.180092155325, 0.26363527652, 1500000, -2.09447366756e-05, -8.58219486269e-05},
    {4000000, 0.239941050167, 0.234132406886, 0.180078236922, 0.263578185198, 2500000, -9.93488702845e-06, -4.07606191754e-05},
    {7000000, 0.239913563523, 0.234091623876, 0.18007228555, 0.263553755282, 3000000, -4.16481450401e-06, -1.70977650404e-05},
    {10000000, 0.239902578098, 0.234075322983, 0.180069907293, 0.263543989668, 6500000, -2.57561875591e-06, -1.0577120263e-05},
    {20000000, 0.239889768436, 0.234056314165, 0.180067134313, 0.263532601041, 15000000, -2.07940132051e-06, -8.54054321625e-06},
    {40000000, 0.239883366297, 0.234046813346, 0.18006574849, 0.263526908581, 25000000, -9.89805157101e-07, -4.06585346238e-06},
    {70000000, 0.239880623073, 0.234042742299, 0.180065154703, 0.263524469334, 30000000, -4.15639999016e-07, -1.70744128053e-06},
    {100000000, 0.239879525875, 0.234041114004, 0.18006491721, 0.263523493699, 65000000, -2.57274991131e-07, -1.05691531621e-06},
    {200000000, 0.239878245878, 0.234039214415, 0.180064640153, 0.263522355504, 150000000, -2.0778998111e-07, -8.53637209863e-07},
    {400000000, 0.239877605906, 0.234038264656, 0.18006450163, 0.263521786424, 250000000, -9.89437414223e-08, -4.06483189774e-07},
    {700000000, 0.239877331638, 0.234037857624, 0.180064442265, 0.263521542537, 300000000, -4.15556100503e-08, -1.70720738213e-07},
    {1000000000, 0.239877221932, 0.234037694812, 0.180064418519, 0.263521444983, 300000000, -2.37459501229e-08, -9.75542097659e-08},
};
//http://www.cvrl.org/cie.htm
//nm,  x,y,  u',v',  dnm,du',dv'
#define GAMUT_POINTS 300
static const double nmGamut[GAMUT_POINTS][8] = {
    {400, 0.173336865481, 0.00479674344727, 0.255764040782, 0.0159249308412, 1.0, -6.35179442855e-05, -3.59479240362e-05},
    {401, 0.173291285659, 0.00478584564815, 0.255700522838, 0.0158889829171, 1.0, -7.22261799869e-05, -2.95917544176e-05},
    {402, 0.173237920453, 0.00477888793222, 0.255619588422, 0.0158657473323, 1.0, -9.13272756161e-05, -1.80951434409e-05},
    {403, 0.173174238776, 0.00477513079984, 0.255517868287, 0.0158527926302, 1.0, -0.000111159593905, -8.69298290558e-06},
    {404, 0.173101012209, 0.00477403067449, 0.255397269235, 0.0158483613665, 1.0, -0.000127463822249, -1.02687732794e-06},
    {405, 0.173020965455, 0.00477505036186, 0.255262940642, 0.0158507388756, 1.0, -0.000142726915907, 1.05862711094e-05},
    {406, 0.172934256851, 0.00478114717178, 0.255111815403, 0.0158695339087, 1.0, -0.000157098326257, 2.45296869262e-05},
    {407, 0.172842756135, 0.00479079294907, 0.25494874399, 0.0158997982494, 1.0, -0.00016219386897, 2.75375624107e-05},
    {408, 0.172751152603, 0.00479876209926, 0.254787427665, 0.0159246090336, 1.0, -0.00015655716377, 1.72775227142e-05},
    {409, 0.172662105581, 0.00480208435632, 0.254635629662, 0.0159343532949, 1.0, -0.000145446643191, -1.48519936438e-07},
    {410, 0.172576550849, 0.00479930191972, 0.254496534378, 0.0159243119937, 1.0, -0.000139638629617, -1.21039327199e-05},
    {411, 0.172489477382, 0.0047952543644, 0.254356352403, 0.0159101454294, 1.0, -0.000148588235848, -6.23065973138e-06},
    {412, 0.172395603384, 0.00479611858893, 0.254199357907, 0.0159118506742, 1.0, -0.000164914088073, 1.08386665823e-05},
    {413, 0.172296001755, 0.00480262947347, 0.254026524227, 0.0159318227626, 1.0, -0.000179396391407, 2.92711536629e-05},
    {414, 0.172192360362, 0.00481488521402, 0.253840565124, 0.0159703929815, 1.0, -0.000190687923935, 4.72887526649e-05},
    {415, 0.172086630755, 0.00483252421804, 0.253645148379, 0.0160264002679, 1.0, -0.000196819301125, 6.38710962345e-05},
    {416, 0.171982445938, 0.00485501016856, 0.253446926522, 0.016098135174, 1.0, -0.000210373713737, 8.95766911741e-05},
    {417, 0.171871019446, 0.00488853192151, 0.253224400952, 0.0162055536503, 1.0, -0.000247379764147, 0.000135291159055},
    {418, 0.171741213706, 0.00493933245662, 0.252952166993, 0.0163687174921, 1.0, -0.000303463577242, 0.00019570191783},
    {419, 0.171587239365, 0.00501034420684, 0.252617473797, 0.0165969574859, 1.0, -0.000367542688286, 0.00026166646063},
    {420, 0.171407433863, 0.00510217097375, 0.252217081617, 0.0168920504134, 1.0, -0.000427575002059, 0.000322698000495},
    {421, 0.171206113462, 0.0052112577767, 0.251762323793, 0.0172423534869, 1.0, -0.000472090949222, 0.000371900284094},
    {422, 0.170992574222, 0.00533390776202, 0.251272899718, 0.0176358509816, 1.0, -0.000503547323741, 0.000415034571885},
    {423, 0.170770596368, 0.0054701212475, 0.250755229145, 0.0180724226307, 1.0, -0.000531902642616, 0.000459744735514},
    {424, 0.170540661924, 0.00562096993347, 0.250209094433, 0.0185553404526, 1.0, -0.000562868753958, 0.000509266172538},
    {425, 0.17030098878, 0.00578850499647, 0.249629491638, 0.0190909549758, 1.0, -0.000598028091492, 0.000563690731466},
    {426, 0.170050158668, 0.00597389510789, 0.24901303825, 0.0196827219155, 1.0, -0.000636455636432, 0.000619132477557},
    {427, 0.169785868751, 0.00617680748816, 0.248356580365, 0.0203292199309, 1.0, -0.000679628225918, 0.000674933372608},
    {428, 0.169504602532, 0.00639803690688, 0.247653781798, 0.0210325886607, 1.0, -0.000729214630856, 0.000733368186637},
    {429, 0.169202921712, 0.00663870591839, 0.246898151103, 0.0217959563042, 1.0, -0.00078530639743, 0.000795383568514},
    {430, 0.168877520671, 0.00690024388793, 0.246083169003, 0.0226233557978, 1.0, -0.000848201816383, 0.000861325356401},
    {431, 0.168524660344, 0.00718404388802, 0.24520174747, 0.023518607017, 1.0, -0.000913172272201, 0.000929791129307},
    {432, 0.168146145462, 0.00749067966632, 0.244256824459, 0.0244829380564, 1.0, -0.000973255132405, 0.000999624477032},
    {433, 0.167746219827, 0.00782081848842, 0.243255237205, 0.025517855971, 1.0, -0.00102729725406, 0.00107135488321},
    {434, 0.167328325745, 0.008175399675, 0.242202229951, 0.0266256478228, 1.0, -0.00107671749845, 0.00114571019665},
    {435, 0.166895290352, 0.00855560636082, 0.241101802208, 0.0278092763643, 1.0, -0.00112596966695, 0.00122571735761},
    {436, 0.166446327135, 0.00896440041776, 0.239950290617, 0.029077082538, 1.0, -0.00118039287091, 0.00130922203851},
    {437, 0.165976758231, 0.00940171622687, 0.238741016467, 0.0304277204413, 1.0, -0.0012388816635, 0.00138702087128},
    {438, 0.165483299011, 0.00986468097235, 0.23747252729, 0.0318511242806, 1.0, -0.00129898248549, 0.00145529462785},
    {439, 0.16496266372, 0.0103507435415, 0.236143051496, 0.033338309697, 1.0, -0.00136079898604, 0.00151494634741},
    {440, 0.164411756375, 0.0108575582768, 0.234750929318, 0.0348810169754, 1.0, -0.00142455035413, 0.0015695767514},
    {441, 0.163828432762, 0.011384865616, 0.233293950787, 0.0364774631998, 1.0, -0.00149345311432, 0.00162995665501},
    {442, 0.163209895954, 0.0119373858146, 0.231764023089, 0.0381409302855, 1.0, -0.00157135786313, 0.00170371826225},
    {443, 0.162552139507, 0.0125200299176, 0.230151235061, 0.0398848997243, 1.0, -0.00165858873822, 0.00179016761956},
    {444, 0.161851438065, 0.0131373070954, 0.228446845613, 0.0417212655246, 1.0, -0.00175380977327, 0.00188777254239},
    {445, 0.16110457958, 0.0137933588217, 0.226643615515, 0.0436604448091, 1.0, -0.00185467944948, 0.0019942088097},
    {446, 0.160309595019, 0.0144913781663, 0.224737486714, 0.045709683144, 1.0, -0.00195718659445, 0.00210406949806},
    {447, 0.159465945758, 0.0152320646437, 0.222729242326, 0.0478685838052, 1.0, -0.00205838194684, 0.00221204890255},
    {448, 0.158573111076, 0.0160151564156, 0.22062072282, 0.0501337809491, 1.0, -0.00215699656993, 0.00231587998525},
    {449, 0.157631165578, 0.0168398709715, 0.218415249186, 0.0525003437757, 1.0, -0.00225142075413, 0.00241389306528},
    {450, 0.156640932577, 0.0177048049909, 0.216117881312, 0.0549615670796, 1.0, -0.00233940923892, 0.00250534067743},
    {451, 0.155605095583, 0.018608606524, 0.213736430708, 0.0575110251306, 1.0, -0.00242344632638, 0.00259853835708},
    {452, 0.154524612495, 0.0195556978045, 0.211270988659, 0.0601586437938, 1.0, -0.00251104651653, 0.00270588514941},
    {453, 0.153397229336, 0.0205537335299, 0.208714337675, 0.0629227954294, 1.0, -0.00260721579582, 0.00283300400294},
    {454, 0.152219236228, 0.0216117110209, 0.206056557068, 0.0658246517997, 1.0, -0.00271468757451, 0.00298286954731},
    {455, 0.150985408376, 0.0227401932916, 0.203284962526, 0.068888534524, 1.0, -0.00283455637479, 0.00315717286593},
    {456, 0.149690564759, 0.0239503301958, 0.200387444318, 0.0721389975315, 1.0, -0.00295834692986, 0.00334752874794},
    {457, 0.148336817068, 0.0252473984317, 0.197368268666, 0.0755835920199, 1.0, -0.00307567845304, 0.00354306386522},
    {458, 0.146928226501, 0.0266351858577, 0.194236087412, 0.079225125262, 1.0, -0.00318496218209, 0.00374229083494},
    {459, 0.145468371779, 0.0281184333297, 0.190998344302, 0.0830681736898, 1.0, -0.00328737772763, 0.00394706566018},
    {460, 0.14396039604, 0.029702970297, 0.187661331957, 0.0871192565823, 1.0, -0.0033846151521, 0.0041564406123},
    {461, 0.14240509019, 0.0313935839862, 0.184229113998, 0.0913810549144, 1.0, -0.00348921131947, 0.00439057995067},
    {462, 0.140795646665, 0.0332131546063, 0.180682909318, 0.0959004164837, 1.0, -0.00362005375134, 0.00468931967991},
    {463, 0.139120682427, 0.0352005728268, 0.176989006495, 0.100759694274, 1.0, -0.00378882947094, 0.00507691741763},
    {464, 0.137363757935, 0.0374030904436, 0.173105250376, 0.106054251319, 1.0, -0.00400452192217, 0.00556826773697},
    {465, 0.1355026712, 0.0398791214721, 0.168979962651, 0.111896229748, 1.0, -0.00427378968823, 0.00617120643197},
    {466, 0.133509340956, 0.0426923900105, 0.164557670999, 0.118396664183, 1.0, -0.00457525616759, 0.00684273161558},
    {467, 0.131370635236, 0.0458759752225, 0.159829450316, 0.125581692979, 1.0, -0.004871319148, 0.0075210259492},
    {468, 0.129085786557, 0.0494498106597, 0.154815032703, 0.133438716081, 1.0, -0.00513896899521, 0.00817484840596},
    {469, 0.126662156977, 0.053425919773, 0.149551512325, 0.141931389791, 1.0, -0.00535856909389, 0.00877603379188},
    {470, 0.124118476728, 0.0578025133737, 0.144097894516, 0.150990783665, 1.0, -0.00552569595623, 0.00931802800712},
    {471, 0.121468583913, 0.0625876720666, 0.138500120413, 0.160567445805, 1.0, -0.00567165481107, 0.00984827905167},
    {472, 0.118701276452, 0.0678304435323, 0.132754584893, 0.170687341768, 1.0, -0.00581750022721, 0.0103985845363},
    {473, 0.115807358768, 0.0735807079728, 0.126865119958, 0.181364614878, 1.0, -0.00595935482593, 0.0109628270991},
    {474, 0.112776054848, 0.079895822896, 0.120835875242, 0.192612995967, 1.0, -0.00609718231614, 0.0115409010826},
    {475, 0.109594323616, 0.0868425111831, 0.114670755326, 0.204446417043, 1.0, -0.00622140763773, 0.0121233822274},
    {476, 0.106260735318, 0.0944860722037, 0.108393059966, 0.216859760422, 1.0, -0.00631496079233, 0.0126708827666},
    {477, 0.102775862947, 0.102863738818, 0.102040833741, 0.229788182576, 1.0, -0.00637613256681, 0.0131457141421},
    {478, 0.0991275999017, 0.112007033037, 0.0956407948325, 0.243151188706, 1.0, -0.00641003862822, 0.0135371114724},
    {479, 0.095304056215, 0.121944863255, 0.0892207564849, 0.256862405521, 1.0, -0.00641592068058, 0.0138396430011},
    {480, 0.0912935070023, 0.132702042487, 0.0828089534713, 0.270830474708, 1.0, -0.00639650267989, 0.0140604066404},
    {481, 0.0870824317271, 0.14431658268, 0.0764277511251, 0.284983218802, 1.0, -0.00634873533697, 0.014233259265},
    {482, 0.082679534482, 0.156865958077, 0.0701114827974, 0.299296993238, 1.0, -0.00625684554654, 0.0143751092192},
    {483, 0.0781159857333, 0.170420486477, 0.0639140600321, 0.313733437241, 1.0, -0.00610643877359, 0.0144674276563},
    {484, 0.0734372599047, 0.185031880527, 0.0578986052502, 0.328231848551, 1.0, -0.00588894267124, 0.014487629236},
    {485, 0.0687059212911, 0.200723217728, 0.0521361746896, 0.342708695713, 1.0, -0.00560110892417, 0.0144085434685},
    {486, 0.0639930236869, 0.217467605405, 0.0466963874019, 0.357048935488, 1.0, -0.00527161779712, 0.0142286015148},
    {487, 0.0593158279806, 0.235253740241, 0.0415929390953, 0.371165898742, 1.0, -0.00494138080124, 0.0139782183745},
    {488, 0.0546665228762, 0.254095590747, 0.0368136257994, 0.385005372237, 1.0, -0.00462587115415, 0.0136763193671},
    {489, 0.0500314970581, 0.27400180322, 0.032341196787, 0.398518537476, 1.0, -0.00432983146891, 0.0133286407724},
    {490, 0.0453907346748, 0.294975964606, 0.0281539628616, 0.411662653781, 1.0, -0.0040445201388, 0.0129335378694},
    {491, 0.040757315336, 0.31698108084, 0.0242521565094, 0.424385613215, 1.0, -0.00374498134871, 0.0124758981126},
    {492, 0.0361951091539, 0.339899934414, 0.0206640001642, 0.436614450007, 1.0, -0.0034252694269, 0.0119532164926},
    {493, 0.0317564703789, 0.363597693246, 0.0174016176556, 0.4482920462, 1.0, -0.00309675109939, 0.0113809934069},
    {494, 0.0274941905348, 0.387921328281, 0.0144704979654, 0.459376436821, 1.0, -0.00276573130843, 0.0107740350394},
    {495, 0.0234599425471, 0.412703479094, 0.0118701550388, 0.469840116279, 1.0, -0.0024372337336, 0.0101441054594},
    {496, 0.019704636303, 0.437755888652, 0.00959603049817, 0.479664647739, 1.0, -0.0021174946485, 0.00951447624228},
    {497, 0.0162684712672, 0.462954507989, 0.00763516574176, 0.488869068764, 1.0, -0.00181276526702, 0.00891113994313},
    {498, 0.0131830411531, 0.488207068412, 0.00597049996414, 0.497486927626, 1.0, -0.00152528181513, 0.00833838647682},
    {499, 0.0104757006831, 0.51340424516, 0.0045846021115, 0.505545841717, 1.0, -0.00125560420646, 0.00779124382415},
    {500, 0.00816802800467, 0.538423070512, 0.00345929155121, 0.513069415274, 1.0, -0.00100234022156, 0.00725813258175},
    {501, 0.00628485157264, 0.563068456322, 0.00257992166838, 0.520062106881, 1.0, -0.000758023261211, 0.00672924834593},
    {502, 0.00487542999269, 0.587116438045, 0.00194324502879, 0.526527911966, 1.0, -0.000517978866696, 0.00621939492027},
    {503, 0.00398242535235, 0.610447497639, 0.00154396393499, 0.532500896721, 1.0, -0.000284790709641, 0.00574991269794},
    {504, 0.00363638422545, 0.633011382751, 0.00137366360951, 0.538027737362, 1.0, -6.07444141507e-05, 0.00533116614858},
    {505, 0.00385852090032, 0.654823151125, 0.00142247510669, 0.543163229018, 1.0, 0.000150121289011, 0.00496224107345},
    {506, 0.00464571323256, 0.675898458599, 0.00167390618753, 0.547952219508, 1.0, 0.000348755577932, 0.00462194528352},
    {507, 0.0060109130717, 0.696120061336, 0.00211998626255, 0.552407119586, 1.0, 0.000544152022628, 0.00429178793584},
    {508, 0.00798839582865, 0.715341516256, 0.00276221023279, 0.55653579538, 1.0, 0.000740264377889, 0.00396865078485},
    {509, 0.0106032905543, 0.733412942652, 0.00360051501833, 0.560344421155, 1.0, 0.000935526053506, 0.00365116967905},
    {510, 0.013870246085, 0.750186428039, 0.0046332623398, 0.563838134738, 1.0, 0.00112377091715, 0.00334552652735},
    {511, 0.0177661242059, 0.765612154434, 0.00584805685263, 0.56703547421, 1.0, 0.00129706032719, 0.00305490031363},
    {512, 0.0222442056947, 0.779629923201, 0.00722738299418, 0.569947935366, 1.0, 0.00145697380768, 0.00276874063642},
    {513, 0.0272732624202, 0.792103502831, 0.00876200446799, 0.572572955483, 1.0, 0.00160854371464, 0.00248177127024},
    {514, 0.0328203575222, 0.80292567299, 0.0104444704235, 0.574911477906, 1.0, 0.00175357909664, 0.00219695256471},
    {515, 0.0388518024032, 0.812016021362, 0.0122691626613, 0.576966860612, 1.0, 0.00189248228548, 0.001921820975},
    {516, 0.0453279848294, 0.819390800456, 0.0142294349944, 0.578755119856, 1.0, 0.00201954970721, 0.001667323959},
    {517, 0.0521766909052, 0.825163542583, 0.0163082620757, 0.58030150853, 1.0, 0.00213000981448, 0.00143455858644},
    {518, 0.059325533352, 0.829425776297, 0.0184894546234, 0.581624237029, 1.0, 0.00222655178331, 0.00121960743339},
    {519, 0.066715886027, 0.832273739284, 0.0207613656423, 0.582740723397, 1.0, 0.00231352708926, 0.00102147411282},
    {520, 0.0743024247734, 0.83380309134, 0.0231165088019, 0.583667185255, 1.0, 0.00239526770654, 0.000837745802847},
    {521, 0.0820533952358, 0.834090314505, 0.0255519010554, 0.584416215003, 1.0, 0.00247367405468, 0.000672019673971},
    {522, 0.0899417395853, 0.833288918896, 0.0280638569113, 0.585011224602, 1.0, 0.00254720816909, 0.000532167691116},
    {523, 0.0979397501106, 0.831592666499, 0.0306463173936, 0.585480550385, 1.0, 0.00261437521878, 0.000419000022595},
    {524, 0.106021107332, 0.829178186631, 0.0332926073488, 0.585849224648, 1.0, 0.00267451765377, 0.0003295512932},
    {525, 0.114160719607, 0.826206959781, 0.0359953527011, 0.586139652971, 1.0, 0.00273000895778, 0.000257643773797},
    {526, 0.122347367034, 0.822770399564, 0.0387526252644, 0.586364512195, 1.0, 0.00277985388573, 0.000194757108316},
    {527, 0.130545668138, 0.818927852909, 0.0415550604726, 0.586529167188, 1.0, 0.00281626227804, 0.000139152314001},
    {528, 0.138702349214, 0.814774382595, 0.0443851498205, 0.586642816823, 1.0, 0.00283617518541, 9.23731959602e-05},
    {529, 0.146773215738, 0.810394606548, 0.0472274108434, 0.58671391358, 1.0, 0.00284149714252, 5.37139225582e-05},
    {530, 0.154722061216, 0.805863545426, 0.0500681441055, 0.586750244668, 1.0, 0.002836772991, 2.25796568044e-05},
    {531, 0.162535424655, 0.801238480414, 0.0529009568254, 0.586759072893, 1.0, 0.00283312472735, -4.08488299225e-06},
    {532, 0.170237195479, 0.796518542245, 0.0557343935602, 0.586742074902, 1.0, 0.00283832619962, -3.04563459286e-05},
    {533, 0.177849528012, 0.79168657906, 0.0585776092246, 0.586698160202, 1.0, 0.00285218985877, -5.79365898842e-05},
    {534, 0.185390757399, 0.786727772821, 0.0614387732777, 0.586626201723, 1.0, 0.00287383335034, -8.65659120067e-05},
    {535, 0.192876097878, 0.781629216363, 0.0643252759253, 0.586525028378, 1.0, 0.00290025917582, -0.000115220163144},
    {536, 0.200308798145, 0.776399416051, 0.0672392916294, 0.586395761396, 1.0, 0.00292819907003, -0.000142194646242},
    {537, 0.207689989667, 0.77105479866, 0.0701816740653, 0.586240639085, 1.0, 0.00295908163514, -0.00016786552726},
    {538, 0.215029550006, 0.765595096061, 0.0731574548997, 0.586060030342, 1.0, 0.00299495490688, -0.00019321283056},
    {539, 0.222336603758, 0.760019999741, 0.0761715838791, 0.585854213424, 1.0, 0.00303576785414, -0.000218327257816},
    {540, 0.22961967265, 0.754329089903, 0.0792289906079, 0.585623375826, 1.0, 0.00308103669948, -0.000243175041241},
    {541, 0.236884720598, 0.748524465175, 0.0823336572781, 0.585367863341, 1.0, 0.00312915517719, -0.00026744447842},
    {542, 0.244132556474, 0.742613991681, 0.0854873009623, 0.585088486869, 1.0, 0.00317887213986, -0.000290920244403},
    {543, 0.251363408871, 0.736605581362, 0.0886914015578, 0.584786022853, 1.0, 0.00323008064545, -0.000313657789979},
    {544, 0.258577508455, 0.73050660191, 0.0919474622532, 0.584461171289, 1.0, 0.00328280482213, -0.000335730104342},
    {545, 0.265775084971, 0.72432392493, 0.095257011202, 0.584114562644, 1.0, 0.00333740058009, -0.000357298975836},
    {546, 0.272957603511, 0.718062186417, 0.0986222634134, 0.583746573338, 1.0, 0.00339476300797, -0.000378476310866},
    {547, 0.280128942482, 0.711724734569, 0.102046537218, 0.583357610022, 1.0, 0.00345530345614, -0.000399148880888},
    {548, 0.28729240908, 0.705316273888, 0.105532870326, 0.582948275576, 1.0, 0.00351868299405, -0.000419217273758},
    {549, 0.294450280894, 0.698842022022, 0.109083903206, 0.582519175475, 1.0, 0.00358448389747, -0.000438672681564},
    {550, 0.301603799396, 0.692307762372, 0.112701838121, 0.582070930213, 1.0, 0.0036541089194, -0.000457869024249},
    {551, 0.308759923093, 0.685712060607, 0.116392121045, 0.581603437426, 1.0, 0.0037263668405, -0.000476832814318},
    {552, 0.315914394449, 0.679063479991, 0.120154571802, 0.581117264584, 1.0, 0.0037992767325, -0.000495338439303},
    {553, 0.323066265382, 0.672367397969, 0.12399067451, 0.580612760548, 1.0, 0.00387394505981, -0.00051354683755},
    {554, 0.330215545357, 0.665628025417, 0.127902461921, 0.580090170909, 1.0, 0.00395098315894, -0.000531569310557},
    {555, 0.337363332851, 0.65884829014, 0.131892640828, 0.579549621927, 1.0, 0.00403151973985, -0.000549615704225},
    {556, 0.344513198355, 0.652028209218, 0.135965501401, 0.578990939501, 1.0, 0.00411516279786, -0.000567642123678},
    {557, 0.351664411297, 0.645172174245, 0.140122966423, 0.578414337679, 1.0, 0.0041999407344, -0.000585308203394},
    {558, 0.358813686684, 0.638287336538, 0.14436538287, 0.577820323094, 1.0, 0.00428551567577, -0.000602539702923},
    {559, 0.365959357349, 0.6313790809, 0.148693997775, 0.577209258273, 1.0, 0.00437288701367, -0.000619495017595},
    {560, 0.373101543868, 0.624450859797, 0.153111156897, 0.576581333059, 1.0, 0.0044637854941, -0.000636475624902},
    {561, 0.380243835464, 0.617502152174, 0.157621568763, 0.575936307024, 1.0, 0.00455609941853, -0.000653329834688},
    {562, 0.387378977959, 0.610541802455, 0.162223355734, 0.575274673389, 1.0, 0.00464872539398, -0.000670064081035},
    {563, 0.394506548797, 0.603571336792, 0.166919019551, 0.574596178861, 1.0, 0.00474382615234, -0.000687051540327},
    {564, 0.401625918831, 0.596592421963, 0.171711008039, 0.573900570309, 1.0, 0.00484134311803, -0.000704290869666},
    {565, 0.408736255706, 0.58960686886, 0.176601705787, 0.573187597122, 1.0, 0.0049408701263, -0.000721670358831},
    {566, 0.415835774706, 0.582617968057, 0.181592748291, 0.572457229591, 1.0, 0.00504138847186, -0.000738986655893},
    {567, 0.42292092671, 0.575630688323, 0.186684482731, 0.57170962381, 1.0, 0.00514244054772, -0.000756235310842},
    {568, 0.429988626512, 0.568648891271, 0.191877629387, 0.570944758969, 1.0, 0.00524441015207, -0.000773535806607},
    {569, 0.437036422594, 0.561675774049, 0.197173303035, 0.570162552197, 1.0, 0.00534770081652, -0.000790951558728},
    {570, 0.444062463582, 0.554713902809, 0.20257303102, 0.569362855852, 1.0, 0.00545248630899, -0.000808482930584},
    {571, 0.451064940951, 0.547766044129, 0.208078275653, 0.568545586336, 1.0, 0.00555810723374, -0.00082597060188},
    {572, 0.458040665647, 0.540836629164, 0.213689245487, 0.567710914648, 1.0, 0.00566382843618, -0.000843282456094},
    {573, 0.464986332978, 0.533930053057, 0.219405932525, 0.566859021424, 1.0, 0.00576949949577, -0.000860407029109},
    {574, 0.4718987439, 0.527050569219, 0.225228244479, 0.56599010059, 1.0, 0.00587502658998, -0.000877329134399},
    {575, 0.478774791158, 0.520202307211, 0.231155985705, 0.565104363155, 1.0, 0.00598044396733, -0.000894105583906},
    {576, 0.485611587052, 0.513388660962, 0.237189132414, 0.564201889422, 1.0, 0.00608505666227, -0.000910611317684},
    {577, 0.492404982334, 0.506614924421, 0.24332609903, 0.56328314052, 1.0, 0.00618769236774, -0.000926502819646},
    {578, 0.499150668334, 0.499887340438, 0.249564517149, 0.562348883783, 1.0, 0.00628820671891, -0.000941657340257},
    {579, 0.505845283794, 0.493211178108, 0.255902512468, 0.561399825839, 1.0, 0.00638710705893, -0.000956136502832},
    {580, 0.512486366782, 0.486590788061, 0.262338731267, 0.560436610777, 1.0, 0.00648520564745, -0.000970143779538},
    {581, 0.519072510401, 0.480028612176, 0.268872923763, 0.55945953828, 1.0, 0.00658235934163, -0.000983922242462},
    {582, 0.525600488985, 0.473527373976, 0.27550344995, 0.558468766292, 1.0, 0.00667693340432, -0.000997393328245},
    {583, 0.532065599161, 0.467091363704, 0.282226790571, 0.557464751624, 1.0, 0.00676755523483, -0.00101034383684},
    {584, 0.538462761903, 0.460725253841, 0.28903856042, 0.556448078618, 1.0, 0.00685330993766, -0.00102263913081},
    {585, 0.544786505595, 0.454434114569, 0.295933410447, 0.555419473362, 1.0, 0.00693294526272, -0.00103394899653},
    {586, 0.551031050212, 0.44822450291, 0.302904450945, 0.554380180625, 1.0, 0.00700704091659, -0.00104440607755},
    {587, 0.557192906096, 0.442099139484, 0.30994749228, 0.553330661207, 1.0, 0.00707768708235, -0.00105476574526},
    {588, 0.563269312373, 0.436058061737, 0.31705982511, 0.552270649135, 1.0, 0.00714510008522, -0.00106533123369},
    {589, 0.569256824125, 0.430101973605, 0.32423769245, 0.551199998739, 1.0, 0.00720818152959, -0.00107597666762},
    {590, 0.575151311365, 0.424232234925, 0.331476188169, 0.5501186958, 1.0, 0.00726849033285, -0.0010868908558},
    {591, 0.580952605161, 0.418446879817, 0.338774673116, 0.549026217028, 1.0, 0.0073201459832, -0.00109658956972},
    {592, 0.586650186891, 0.412758421192, 0.346116480136, 0.54792551666, 1.0, 0.00734805202404, -0.00110206765071},
    {593, 0.592224800071, 0.407189528585, 0.353470777164, 0.546822081726, 1.0, 0.007344348631, -0.00110191606829},
    {594, 0.597658162105, 0.401761934972, 0.360805177398, 0.545721684524, 1.0, 0.00730738695097, -0.0010958325589},
    {595, 0.602932785576, 0.396496633573, 0.368085551066, 0.544630416609, 1.0, 0.00723825687886, -0.00108414481564},
    {596, 0.608035111132, 0.391409151708, 0.375281691155, 0.543553394892, 1.0, 0.00715762441148, -0.00107062198258},
    {597, 0.612976999571, 0.386486157332, 0.382400799889, 0.542489172643, 1.0, 0.00709117325432, -0.00105962435126},
    {598, 0.617778725585, 0.381705756829, 0.389464037664, 0.54143414619, 1.0, 0.00704612953606, -0.00105228254619},
    {599, 0.622459295079, 0.377047286381, 0.396493058961, 0.540384607551, 1.0, 0.00702303359168, -0.00104870962431},
    {600, 0.627036599764, 0.372491145218, 0.403510104847, 0.539336726941, 1.0, 0.00701698660239, -0.00104809541332},
    {601, 0.63152094286, 0.368026010822, 0.410527032166, 0.538288416724, 1.0, 0.00700413651736, -0.00104647167004},
    {602, 0.635899819576, 0.363665402433, 0.417518377882, 0.537243783601, 1.0, 0.00696098921176, -0.00103996200895},
    {603, 0.640156159548, 0.359427724304, 0.424449010589, 0.536208492707, 1.0, 0.00688149466769, -0.00102758881177},
    {604, 0.644272960657, 0.355331369772, 0.431281367217, 0.535188605978, 1.0, 0.0067630750769, -0.00100893146437},
    {605, 0.648233106014, 0.351394916305, 0.437975160743, 0.534190629778, 1.0, 0.00661089303032, -0.000984774769641},
    {606, 0.652028235718, 0.347627960748, 0.444503153278, 0.533219056438, 1.0, 0.00644909574456, -0.000959170966958},
    {607, 0.65566917925, 0.344018294844, 0.450873352232, 0.532272287844, 1.0, 0.0062959674474, -0.000935446671179},
    {608, 0.659166134693, 0.340553225412, 0.457095088173, 0.531348163096, 1.0, 0.00615195186508, -0.000913886347581},
    {609, 0.662528222054, 0.337220992607, 0.463177255962, 0.530444515149, 1.0, 0.00601663118398, -0.000894503089699},
    {610, 0.665763576238, 0.334010651155, 0.469128350541, 0.529559156917, 1.0, 0.00588396868636, -0.000876266888828},
    {611, 0.668874143664, 0.330918553002, 0.474945193335, 0.528691981371, 1.0, 0.00574376984321, -0.000857036984439},
    {612, 0.671858667148, 0.3279470743, 0.480615890227, 0.527845082948, 1.0, 0.00559497789253, -0.000836167415826},
    {613, 0.674719511112, 0.325095182004, 0.48613514912, 0.527019646539, 1.0, 0.00544079541256, -0.000814077847373},
    {614, 0.677458888275, 0.322362076689, 0.491497481052, 0.526216927253, 1.0, 0.0052810026757, -0.000790692172141},
    {615, 0.680078849722, 0.319747217069, 0.496697154472, 0.525438262195, 1.0, 0.00511637747404, -0.000766300580621},
    {616, 0.682581574187, 0.317248705962, 0.501730236, 0.524684326092, 1.0, 0.00494962872039, -0.000741582727935},
    {617, 0.684970601449, 0.314862815015, 0.506596411912, 0.523955096739, 1.0, 0.00478317944882, -0.0007167902473},
    {618, 0.687250454557, 0.312585963996, 0.511296594898, 0.523250745597, 1.0, 0.00461851852906, -0.000691939573603},
    {619, 0.689426303028, 0.310414011286, 0.51583344897, 0.522571217592, 1.0, 0.00445742917137, -0.00066725911003},
    {620, 0.691503972962, 0.308342260557, 0.520211453241, 0.521916227377, 1.0, 0.00430146751622, -0.000642954106013},
    {621, 0.693489634973, 0.306365690818, 0.524436384003, 0.52128530938, 1.0, 0.00415162149988, -0.000619426682666},
    {622, 0.695388638102, 0.3044785552, 0.528514696241, 0.520677374012, 1.0, 0.00400818082112, -0.000597119992737},
    {623, 0.697205569779, 0.302675072704, 0.532452745645, 0.520091069395, 1.0, 0.0038702413688, -0.000576066122891},
    {624, 0.698943910386, 0.300950424979, 0.536255178978, 0.519525241766, 1.0, 0.00373608249207, -0.000556070562327},
    {625, 0.700606060606, 0.299300699301, 0.539924910629, 0.51897892827, 1.0, 0.00360252311008, -0.000536573758996},
    {626, 0.702192588541, 0.297724511863, 0.543460225198, 0.518452094248, 1.0, 0.00347177179618, -0.000517570689267},
    {627, 0.703708691019, 0.296217118054, 0.546868454222, 0.517943786891, 1.0, 0.00335245403493, -0.000500168028138},
    {628, 0.705162853424, 0.294770292086, 0.550165133268, 0.517451758192, 1.0, 0.00324862422151, -0.000484999818589},
    {629, 0.706563246694, 0.293376153173, 0.553365702665, 0.516973787254, 1.0, 0.00316022445824, -0.000472043185491},
    {630, 0.707917791622, 0.292027108935, 0.556485582185, 0.516507671821, 1.0, 0.00308377388921, -0.000460832525516},
    {631, 0.709230985414, 0.290718622165, 0.559533250443, 0.516052122203, 1.0, 0.00300791833473, -0.000449754727303},
    {632, 0.710500394495, 0.289452941203, 0.562501418854, 0.515608162366, 1.0, 0.00292513943636, -0.000437645361029},
    {633, 0.711724146175, 0.288232104799, 0.565383529316, 0.515176831481, 1.0, 0.00283676293156, -0.000424634694262},
    {634, 0.71290123113, 0.287057320364, 0.568174944717, 0.514758892978, 1.0, 0.00274485750861, -0.000411019961257},
    {635, 0.714031597117, 0.285928873546, 0.570873244333, 0.514354791559, 1.0, 0.00265284962444, -0.000397322569518},
    {636, 0.715117053483, 0.284845106129, 0.573480643966, 0.513964247838, 1.0, 0.00256295944612, -0.000383911503697},
    {637, 0.716159198599, 0.283804449182, 0.575999163225, 0.513586968551, 1.0, 0.00247387288359, -0.000370600134752},
    {638, 0.717158613642, 0.282806411931, 0.578428389733, 0.513223047569, 1.0, 0.0023847221277, -0.00035724405626},
    {639, 0.718116142602, 0.281850256563, 0.580768607481, 0.512872480439, 1.0, 0.00229627061291, -0.000343951150944},
    {640, 0.71903294163, 0.280934951519, 0.583020930959, 0.512535145267, 1.0, 0.00221070171319, -0.000331045328489},
    {641, 0.719911552942, 0.280058078207, 0.585190010907, 0.512210389782, 1.0, 0.00212766014959, -0.000318485926659},
    {642, 0.72075270664, 0.279218959823, 0.587276251258, 0.511898173414, 1.0, 0.0020418063194, -0.000305487359559},
    {643, 0.721554522487, 0.278419514685, 0.589273623546, 0.511599415063, 1.0, 0.00194964323824, -0.000291526914935},
    {644, 0.72231491556, 0.277661870368, 0.591175537735, 0.511315119584, 1.0, 0.0018506175052, -0.000276519798368},
    {645, 0.723031602573, 0.276948357748, 0.592974858556, 0.511046375466, 1.0, 0.00174384844216, -0.000260306293334},
    {646, 0.72370191604, 0.276281836244, 0.594663234619, 0.510794506997, 1.0, 0.00163503970306, -0.000243763256814},
    {647, 0.724328018926, 0.275660074921, 0.596244937962, 0.510558848952, 1.0, 0.0015337949505, -0.000228440225154},
    {648, 0.724914405134, 0.275078184055, 0.59773082452, 0.510337626547, 1.0, 0.00144512990706, -0.000215167463201},
    {649, 0.725466776098, 0.274529977978, 0.599135197777, 0.510128514026, 1.0, 0.00137287209264, -0.000204555926369},
    {650, 0.725992317542, 0.274007682458, 0.600476568705, 0.509928514694, 1.0, 0.00131607068855, -0.000196807449421},
    {651, 0.726494726714, 0.273505273286, 0.601767339154, 0.509734899127, 1.0, 0.00126405709628, -0.000189608564442},
    {652, 0.726974970469, 0.273025029531, 0.603004682898, 0.509549297565, 1.0, 0.00120883281755, -0.000181324922633},
    {653, 0.727431838038, 0.272568161962, 0.604185004789, 0.509372249282, 1.0, 0.00115025587029, -0.000172538380543},
    {654, 0.727864310793, 0.272135689207, 0.605305194638, 0.509204220804, 1.0, 0.00108903222822, -0.000163354834233},
    {655, 0.728271728272, 0.271728271728, 0.606363069245, 0.509045539613, 1.0, 0.00102961202837, -0.000154441804256},
    {656, 0.7286564871, 0.2713435129, 0.607364418695, 0.508895337196, 1.0, 0.000974776067579, -0.000146216410137},
    {657, 0.729020030309, 0.270979969691, 0.60831262138, 0.508753106793, 1.0, 0.000919615590586, -0.000137942338588},
    {658, 0.729360950695, 0.270639049305, 0.609203649876, 0.508619452519, 1.0, 0.000860347417669, -0.00012905211265},
    {659, 0.729677783238, 0.270322216762, 0.610033316216, 0.508495002568, 1.0, 0.000796823084775, -0.000119523462716},
    {660, 0.729969012838, 0.270030987162, 0.610797296046, 0.508380405593, 1.0, 0.000730058801387, -0.000109508820208},
    {661, 0.730233949141, 0.269766050859, 0.611493433818, 0.508275984927, 1.0, 0.000664128439231, -9.96192658847e-05},
    {662, 0.730474165302, 0.269525834698, 0.612125552924, 0.508181167061, 1.0, 0.000604779152932, -9.07168729397e-05},
    {663, 0.730693306724, 0.269306693276, 0.612702992124, 0.508094551181, 1.0, 0.000556432457837, -8.34648686756e-05},
    {664, 0.730896252243, 0.269103747757, 0.61323841784, 0.508014237324, 1.0, 0.000522791822392, -7.84187733588e-05},
    {665, 0.731089395585, 0.268910604415, 0.613748575769, 0.507937713635, 1.0, 0.000506607189115, -7.59910783671e-05},
    {666, 0.731279635919, 0.268720364081, 0.614251632218, 0.507862255167, 1.0, 0.000499596147462, -7.49394221193e-05},
    {667, 0.731467050901, 0.268532949099, 0.614747768064, 0.50778783479, 1.0, 0.000490450075966, -7.35675113949e-05},
    {668, 0.731649970922, 0.268350029078, 0.61523253237, 0.507715120144, 1.0, 0.000476322439534, -7.144836593e-05},
    {669, 0.731826333485, 0.268173666515, 0.615700412943, 0.507644938059, 1.0, 0.000455640758841, -6.83461138261e-05},
    {670, 0.731993299832, 0.268006700168, 0.616143813888, 0.507578427917, 1.0, 0.000430529195115, -6.45793792672e-05},
    {671, 0.732150422162, 0.267849577838, 0.616561471333, 0.5075157793, 1.0, 0.000407585172865, -6.11377759298e-05},
    {672, 0.732299831085, 0.267700168915, 0.616958984234, 0.507456152365, 1.0, 0.000389140358555, -5.83710537833e-05},
    {673, 0.732442822871, 0.267557177129, 0.61733975205, 0.507399037192, 1.0, 0.000375168079532, -5.62752119297e-05},
    {674, 0.73258149359, 0.26741850641, 0.617709320393, 0.507343601941, 1.0, 0.000368024849428, -5.52037274142e-05},
    {675, 0.732718894009, 0.267281105991, 0.618075801749, 0.507288629738, 1.0, 0.000369771733463, -5.54657600195e-05},
    {676, 0.732858647268, 0.267141352732, 0.61844886386, 0.507232670421, 1.0, 0.000375627960081, -5.63441940122e-05},
    {677, 0.733000205253, 0.266999794747, 0.618827057669, 0.50717594135, 1.0, 0.000378228882435, -5.67343323653e-05},
    {678, 0.733141671137, 0.266858328863, 0.619205321625, 0.507119201756, 1.0, 0.000375801081345, -5.63701622018e-05},
    {679, 0.733281178935, 0.266718821065, 0.619578659832, 0.507063201025, 1.0, 0.000368509284181, -5.52763926271e-05},
    {680, 0.733416967226, 0.266583032774, 0.619942340193, 0.507008648971, 1.0, 0.000360917533032, -5.41376299548e-05},
    {681, 0.733550585848, 0.266449414152, 0.620300494898, 0.506954925765, 1.0, 0.00035707799817, -5.35616997255e-05},
    {682, 0.733683296436, 0.266316703564, 0.620656496189, 0.506901525572, 1.0, 0.000351722841671, -5.27584262507e-05},
    {683, 0.733812716688, 0.266187283312, 0.621003940582, 0.506849408913, 1.0, 0.000338914463332, -5.08371694999e-05},
    {684, 0.733935690314, 0.266064309686, 0.621334325116, 0.506799851233, 1.0, 0.000315223851889, -4.72835777834e-05},
    {685, 0.734047300312, 0.265952699688, 0.621634388285, 0.506754841757, 1.0, 0.000278158651551, -4.17237977327e-05},
    {686, 0.734142556897, 0.265857443103, 0.621890642419, 0.506716403637, 1.0, 0.000234326119053, -3.51489178579e-05},
    {687, 0.734221470251, 0.265778529749, 0.622103040523, 0.506684543921, 1.0, 0.000193679137766, -2.90518706649e-05},
    {688, 0.734286446367, 0.265713553633, 0.622278000695, 0.506658299896, 1.0, 0.000160846168669, -2.41269253004e-05},
    {689, 0.734340919959, 0.265659080041, 0.622424732861, 0.506636290071, 1.0, 0.000139710657206, -2.09565985809e-05},
    {690, 0.734390164995, 0.265609835005, 0.622557422009, 0.506616386699, 1.0, 0.000130420785356, -1.95631178034e-05},
    {691, 0.734437712656, 0.265562287344, 0.622685574431, 0.506597163835, 1.0, 0.00012400476161, -1.86007142415e-05},
    {692, 0.734482170411, 0.265517829589, 0.622805431532, 0.50657918527, 1.0, 0.000114886656216, -1.72329984324e-05},
    {693, 0.734522930552, 0.265477069448, 0.622915347744, 0.506562697838, 1.0, 0.000104301942592, -1.56452913888e-05},
    {694, 0.734559518422, 0.265440481578, 0.623014035417, 0.506547894687, 1.0, 9.27022897272e-05, -1.39053434591e-05},
    {695, 0.734591661643, 0.265408338357, 0.623100752323, 0.506534887151, 1.0, 8.30684041417e-05, -1.24602606212e-05},
    {696, 0.734621094713, 0.265378905287, 0.623180172226, 0.506522974166, 1.0, 7.72258663465e-05, -1.15838799519e-05},
    {697, 0.734648896836, 0.265351103164, 0.623255204056, 0.506511719392, 1.0, 7.05557039984e-05, -1.05833555998e-05},
    {698, 0.734673378011, 0.265326621989, 0.623321283634, 0.506501807455, 1.5, 5.55069555359e-05, -8.3260433304e-06},
    {700, 0.734690023258, 0.265309976742, 0.623366217967, 0.506495067305, 2.0, 4.49343335192e-05, -6.74015002777e-06},
};
static int sign(double d) {
    if(d < 0) {
        return -1;
    }
    if(d > 0) {
        return 1;
    }
    return 0;
}
//http://en.wikipedia.org/wiki/Cubic_Hermite_spline
double cubicSpline(double t, double p0, double m0, double p1, double m1) {
    double t2 = t * t;
    double t3 = t2 * t;
    // standard form
    return (2 * t3 - 3 * t2 + 1) * p0 +
           (t3 - 2 * t2 + t) * m0 +
           (-2 * t3 + 3 * t2) * p1 +
           (t3 - t2) * m1;
}
double cubicSplineDerivative(double t, double p0, double m0, double p1, double m1) {
    double t2 = t * t;
    // condensed for performance
    return 6 * (p0 - p1) * (t2 - t) +
           m0 * (3 * t2 - 4 * t + 1) +
           m1 * (3 * t2 - 2 * t);
    // standard form
    return (6 * t2 - 6 * t) * p0 +
           (3 * t2 - 4 * t + 1) * m0 +
           (-6 * t2 + 6 * t) * p1 +
           (3 * t2 - 2 * t) * m1;
}
static void nearestCurve(double u, double v, const double curve[][8], int points, double &out, double &outduv, double maxduv, unsigned int &errorcode, int errorflag) {
    out = 0;
    outduv = 10;

    for(int i = 0, ii = i + 1; ii < points; ++i, ++ii) {
        double x0 = curve[i][3], x1 = curve[ii][3];
        double dx0 = curve[i][6], dx1 = curve[ii][6];
        double y0 = curve[i][4], y1 = curve[ii][4];
        double dy0 = curve[i][7], dy1 = curve[ii][7];

        double du0 = u - x0, dv0 = v - y0;
        double du1 = u - x1, dv1 = v - y1;

        double t[] = {0, 1};
        double angles[] = {
            (dx0 * du0) + (dy0 * dv0),
            (dx1 * du1) + (dy1 * dv1),
        };

        if(sign(angles[0]) == sign(angles[1])) {
            continue;
        }

        for(int j = 0; j < 20; ++j) {
            double tm = (t[0] + t[1]) / 2;
            double xm = cubicSpline(tm, x0, dx0, x1, dx1);
            double dxm = cubicSplineDerivative(tm, x0, dx0, x1, dx1);
            double ym = cubicSpline(tm, y0, dy0, y1, dy1);
            double dym = cubicSplineDerivative(tm, y0, dy0, y1, dy1);

            double dum = u - xm;
            double dvm = v - ym;

            double anglem = (dxm * dum) + (dym * dvm);
            if(sign(angles[0]) == sign(anglem)) {
                t[0] = tm;
                angles[0] = anglem;
            } else {
                t[1] = tm;
                angles[1] = anglem;
            }
        }

        {
            double tm = (t[0] + t[1]) / 2;
            double xm = cubicSpline(tm, x0, dx0, x1, dx1);
            double dxm = cubicSplineDerivative(tm, x0, dx0, x1, dx1);
            double ym = cubicSpline(tm, y0, dy0, y1, dy1);
            double dym = cubicSplineDerivative(tm, y0, dy0, y1, dy1);

            double dum = u - xm;
            double dvm = v - ym;

            double tduv = sqrt((dum * dum) + (dvm * dvm));
            if(fabs(outduv) > fabs(tduv)) {
                outduv = tduv;
                out = cubicSpline(tm, curve[i][0], curve[i][5], curve[ii][0], curve[ii][5]);

                //check if on left or right side
                double dxp = dym;
                double dyp = -dxm;
                if((dxp * dum) + (dyp * dvm) < 0) {
                    outduv = -outduv;
                }
            }
        }

    }
    if(fabs(outduv) > maxduv) {
        errorcode |= errorflag;
        outduv = 0;
        out = 0;
    }
}
GamutSpec::GamutSpec() {
    _redX = 0;
    _redY = 0;
    _redBigY = 0;
    _greenX = 0;
    _greenY = 0;
    _greenBigY = 0;
    _blueX = 0;
    _blueY = 0;
    _blueBigY = 0;
    _whiteX = 0;
    _whiteY = 0;
    _whiteBigY = 0;

    RGBtoXYZ.initializeV(3, 3);
    XYZtoRGB.initializeV(3, 3);

    _code = GamutCode::USER_DEFINE;
}
GamutSpec::GamutSpec(const GamutSpec &gs) {
    _redX = gs._redX;
    _redY = gs._redY;
    _redBigY = gs._redBigY;
    _greenX = gs._greenX;
    _greenY = gs._greenY;
    _greenBigY = gs._greenBigY;
    _blueX = gs._blueX;
    _blueY = gs._blueY;
    _blueBigY = gs._blueBigY;
    _whiteX = gs._whiteX;
    _whiteY = gs._whiteY;
    _whiteBigY = gs._whiteBigY;

    RGBtoXYZ = gs.RGBtoXYZ;
    XYZtoRGB = gs.XYZtoRGB;

    _code = gs._code;
}
GamutSpec::GamutSpec(double redX, double redY,
                     double greenX, double greenY,
                     double blueX, double blueY,
                     double whiteX, double whiteY, double whiteBigY) :
    _redX(redX), _redY(redY),
    _greenX(greenX), _greenY(greenY),
    _blueX(blueX), _blueY(blueY),
    _whiteX(whiteX), _whiteY(whiteY), _whiteBigY(whiteBigY) {

    _redBigY = 0;
    _greenBigY = 0;
    _blueBigY = 0;

    RGBtoXYZ.initializeV(3, 3);
    XYZtoRGB.initializeV(3, 3);

    updateMatrixes();



}
bool GamutSpec::operator ==(const GamutSpec &other) {
    double y;
    double otherWhitex, otherWhitey;
    double otherRedx, otherRedy;
    double otherGreenx, otherGreeny;
    double otherBluex, otherBluey;

    other.getWhite(otherWhitex, otherWhitey, y);
    other.getRed(otherRedx, otherRedy, y);
    other.getGreen(otherGreenx, otherGreeny, y);
    other.getBlue(otherBluex, otherBluey, y);

    if(_whiteX == otherWhitex
            && _whiteY == otherWhitey
            && _redX == otherRedx
            && _redY == otherRedy
            && _greenX == otherGreenx
            && _greenY == otherGreeny
            && _blueX == otherBluex
            && _blueY == otherBluey) {
        return true;
    } else {
        return false;
    }
}

//Got the points at http://en.wikipedia.org/wiki/RGB_color_spaces
GamutSpec GamutSpec::fromCode(GamutCode code, double whiteBigY) {
    GamutSpec gs;
    switch(code) {
        case GamutCode::NTSC:
            gs = GamutSpec(0.67, 0.33, //red
                           0.21, 0.71, //green
                           0.14, 0.08, //blue
                           0.3101, 0.3162, whiteBigY); //white
            break;
        case GamutCode::EBU:
            gs = GamutSpec(0.64, 0.33,
                           0.29, 0.6,
                           0.15, 0.06,
                           0.3127, 0.3290, whiteBigY);
            break;
        case GamutCode::REC709:
            gs = GamutSpec(0.640, 0.33,
                           0.30, 0.6,
                           0.15, 0.06,
                           0.3127, 0.3290, whiteBigY);
            break;
        case GamutCode::REC2020:
            gs = GamutSpec(0.708, 0.292,
                           0.170, 0.797,
                           0.131, 0.046,
                           0.3127, 0.3290, whiteBigY);
            break;
        case GamutCode::SMPTE:
            gs = GamutSpec(0.630, 0.34,
                           0.310, 0.595,
                           0.155, 0.07,
                           0.3127, 0.3290,  whiteBigY);
            break;
        case GamutCode::DCIP3:
            gs = GamutSpec(0.680, 0.32,
                           0.265, 0.690,
                           0.150, 0.06,
                           0.314, 0.351,  whiteBigY);
            break;
        case GamutCode::USER_DEFINE:
        default:
            gs = GamutSpec(0, 0,
                           0, 0,
                           0, 0,
                           0, 0, 0);
    }
    gs._code = code;
    return gs;
}

GamutCode GamutSpec::getCodeSpec() {
    return _code;
}

void GamutSpec::setRed(double x, double y) {
    _redX = x;
    _redY = y;
    checkGamutCode();
    updateMatrixes();
}

void GamutSpec::setGreen(double x, double y) {
    _greenX = x;
    _greenY = y;
    checkGamutCode();
    updateMatrixes();
}
void GamutSpec::setBlue(double x, double y) {
    _blueX = x;
    _blueY = y;
    checkGamutCode();
    updateMatrixes();
}
void GamutSpec::setWhite(double x, double y, double bigY) {
    _whiteX = x;
    _whiteY = y;
    _whiteBigY = bigY;
    checkGamutCode();
    updateMatrixes();
}
void GamutSpec::getWhite(double &x, double &y, double &bigY)  const {
    x = _whiteX;
    y = _whiteY;
    bigY = _whiteBigY;
}
void GamutSpec::getRed(double &x, double &y, double &bigY)  const {
    x = _redX;
    y = _redY;
    bigY = _redBigY;
}
void GamutSpec::getGreen(double &x, double &y, double &bigY)  const {
    x = _greenX;
    y = _greenY;
    bigY = _greenBigY;
}
void GamutSpec::getBlue(double &x, double &y, double &bigY)  const {
    x = _blueX;
    y = _blueY;
    bigY = _blueBigY;
}
void GamutSpec::checkGamutCode() {
    for(int i = 0; i < (int)GamutCode::USER_DEFINE; ++i) {
        GamutSpec g = GamutSpec::fromCode((GamutCode)i);
        if(*this == g) {
            _code = (GamutCode)i;
            return;
        }
    }
    _code = GamutCode::USER_DEFINE;
}
void GamutSpec::reduceRow(double **mat, int n, int lenght) {
    double key = mat[n][n];
    for(int i = 0; i < lenght; ++i) {
        mat[n][i] /= key;
    }
    for(int i = 0; i < 3; ++i) {
        if(i == n) {
            continue;
        }
        double mult = mat[i][n];
        for(int j = 0; j < lenght; ++j) {
            mat[i][j] -= mult * mat[n][j];
            double item = mat[i][j];
            ++item;
            --item;
        }
    }
}
void GamutSpec::updateMatrixes() {
    RGBtoXYZ.clear();
    XYZtoRGB.clear();

    double whiteX, whiteY, whiteZ;
    getXYZfromxyY(_whiteX, _whiteY, _whiteBigY, whiteX, whiteZ);
    whiteY = _whiteBigY;

    double redZ = 1 - _redX - _redY;
    double greenZ = 1 - _greenX - _greenY;
    double blueZ = 1 - _blueX - _blueY;


    Matrix<double> mat;
    mat.initializeV(3, 4);

    //x
    mat.v[0][0] = _redX;
    mat.v[0][1] = _greenX;
    mat.v[0][2] = _blueX;
    mat.v[0][3] = whiteX;
    //y
    mat.v[1][0] = _redY;
    mat.v[1][1] = _greenY;
    mat.v[1][2] = _blueY;
    mat.v[1][3] = whiteY;
    //z
    mat.v[2][0] = redZ;
    mat.v[2][1] = greenZ;
    mat.v[2][2] = blueZ;
    mat.v[2][3] = whiteZ;

    for(int i = 0; i < 3; ++i) {
        reduceRow(mat.v, i, 4);
    }

    double ar = mat.v[0][3];
    double ag = mat.v[1][3];
    double ab = mat.v[2][3];


    Matrix<double> rgbtoxyz;
    rgbtoxyz.initializeV(3, 6);

    //x
    rgbtoxyz.v[0][0] = ar * _redX;
    rgbtoxyz.v[0][1] = ag * _greenX;
    rgbtoxyz.v[0][2] = ab * _blueX;
    rgbtoxyz.v[0][3] = 1.0;
    rgbtoxyz.v[0][4] = 0.0;
    rgbtoxyz.v[0][5] = 0.0;
    //y
    rgbtoxyz.v[1][0] = ar * _redY;
    rgbtoxyz.v[1][1] = ag * _greenY;
    rgbtoxyz.v[1][2] = ab * _blueY;
    rgbtoxyz.v[1][3] = 0.0;
    rgbtoxyz.v[1][4] = 1.0;
    rgbtoxyz.v[1][5] = 0.0;
    //z
    rgbtoxyz.v[2][0] = ar * redZ;
    rgbtoxyz.v[2][1] = ag * greenZ;
    rgbtoxyz.v[2][2] = ab * blueZ;
    rgbtoxyz.v[2][3] = 0.0;
    rgbtoxyz.v[2][4] = 0.0;
    rgbtoxyz.v[2][5] = 1.0;

    for(int i = 0; i < 3; ++i) {
        for(int j = 0; j < 3; ++j) {
            RGBtoXYZ.v[i][j] = rgbtoxyz.v[i][j];
        }
    };

    for(int i = 0; i < 3; ++i) {
        reduceRow(rgbtoxyz.v, i, 6);
    }

    for(int i = 0; i < 3; ++i) {
        XYZtoRGB.v[i][0] = rgbtoxyz.v[i][3];
        XYZtoRGB.v[i][1] = rgbtoxyz.v[i][4];
        XYZtoRGB.v[i][2] = rgbtoxyz.v[i][5];
    }

    _redBigY = RGBtoXYZ.v[1][0];
    _greenBigY = RGBtoXYZ.v[1][1];
    _blueBigY =  RGBtoXYZ.v[1][2];
}

Matrix<double> GamutSpec::getXYZtoRGB() const {
    return XYZtoRGB;
}
Matrix<double> GamutSpec::getRGBtoXYZ() const {
    return RGBtoXYZ;
}

void Measurement::projectOntoCurve(double u, double v, double whiteU, double whiteV, const double curve[][8], int points, double &out, double &outduv, unsigned int &errorcode, unsigned int errorflag) {
    if(u == 0 || v == 0) {
        out = 0;
        outduv = 0;
        return;
    }

    out = 0;
    outduv = 10;

    double du = u - whiteU;
    double dv = v - whiteV;
    double duv = sqrt(du * du + dv * dv);

    double dup = dv;
    double dvp = -du;

    for(int i = 0, ii = i + 1; ii < points; ++i, ++ii) {
        double x0 = curve[i][3] - whiteU, x1 = curve[ii][3] - whiteU;
        double dx0 = curve[i][6], dx1 = curve[ii][6];
        double y0 = curve[i][4] - whiteV, y1 = curve[ii][4] - whiteV;
        double dy0 = curve[i][7], dy1 = curve[ii][7];

        double inFront = (x0 * du) + (y0 * dv);
        if(inFront < 0) {
            continue;
        }

        double t[] = {0, 1};
        double angles[] = {
            (x0 * dup) + (y0 * dvp),
            (x1 * dup) + (y1 * dvp),
        };

        if(sign(angles[0]) == sign(angles[1])) {
            continue;
        }

        for(int j = 0; j < 20; ++j) {
            double tm = (t[0] + t[1]) / 2;
            double xm = cubicSpline(tm, x0, dx0, x1, dx1);
            double ym = cubicSpline(tm, y0, dy0, y1, dy1);

            double anglem = (xm * dup) + (ym * dvp);
            if(sign(angles[0]) == sign(anglem)) {
                t[0] = tm;
                angles[0] = anglem;
            } else {
                t[1] = tm;
                angles[1] = anglem;
            }
        }

        {
            double tm = (t[0] + t[1]) / 2;
            double xm = cubicSpline(tm, x0, dx0, x1, dx1);
            double ym = cubicSpline(tm, y0, dy0, y1, dy1);
            double dxu = xm - du;
            double dyv = ym - dv;

            double dxy = sqrt((xm * xm) + (ym * ym));
            double tduv = sqrt((dxu * dxu) + (dyv * dyv));
            if(dxy < duv) {
                tduv = -tduv;
            }
            if(fabs(outduv) > fabs(tduv)) {
                outduv = tduv;
                out = cubicSpline(tm, curve[i][0], curve[i][5], curve[ii][0], curve[ii][5]);
            }
        }

    }
    if(fabs(outduv) > 1) {
        errorcode |= errorflag;
        outduv = 0;
        out = 0;
    }
}
bool Measurement::findOnCurve(double value, const double curve[][8], int points, double &u, double &v, double &du, double &dv) {
    int i;
    double t;
    for(i = 0; i < points - 1; ++i) {
        if(value < curve[i][0] || curve[i + 1][0] < value) {
            continue;
        }

        double value0 = curve[i][0] - value;
        double value1 = curve[i + 1][0] - value;
        double dvalue0 = curve[i][5];
        double dvalue1 = curve[i + 1][5];

        double times[] = {0, 1};
        double values[] = {value0, value1};
        for(int j = 0; j < 20; ++j) {
            double tm = (times[0] + times[1]) / 2;
            double valuem = cubicSpline(tm, value0, dvalue0, value1, dvalue1);

            if(sign(values[0]) == sign(valuem)) {
                times[0] = tm;
                values[0] = valuem;
            } else {
                times[1] = tm;
                values[1] = valuem;
            }
        }

        t = (times[0] + times[1]) / 2;
        break;
    }
    if(i < points - 1) {
        u = cubicSpline(t, curve[i][3], curve[i][6], curve[i + 1][3], curve[i + 1][6]);
        v = cubicSpline(t, curve[i][4], curve[i][7], curve[i + 1][4], curve[i + 1][7]);
        du = cubicSplineDerivative(t, curve[i][3], curve[i][6], curve[i + 1][3], curve[i + 1][6]);
        dv = cubicSplineDerivative(t, curve[i][4], curve[i][7], curve[i + 1][4], curve[i + 1][7]);
        return true;
    } else {
        return false;
    }
}

void Measurement::unitVector(double &x, double &y) {
    double mag = sqrt(x * x + y * y);
    x /= mag;
    y /= mag;
}

double Measurement::invertLabF(double t) {
    double crossOver = 6. / 29.;
    if(t > crossOver) {
        return t * t * t;
    } else {
        return 3.*crossOver * crossOver * (t - (4. / 29.));
    }
}

double Measurement::labF(double t) {
    double crossOver = (6.*6.*6.) / (29.*29.*29.);
    if(t > crossOver) {
        return pow(t, 1. / 3.);
    } else {
        return ((1. / 3.) * ((29.*29.) / (6.*6.)) * t) + (4. / 29.);
    }
}
Measurement Measurement::fromError(int error) {
    Measurement m;
    m.errorcode |= error;
    return m;
}
Measurement Measurement::fromXYZ(double X, double Y, double Z, const GamutSpec &gs, int error) {
    Measurement m;
    m.errorcode |= error;

    if(ABS(X) < 1e-10) {
        X = 0;
    }
    if(ABS(Y) < 1e-10) {
        Y = 0;
    }
    if(ABS(Z) < 1e-10) {
        Z = 0;
    }
    if(X + Y + Z =< 0) {
        m.computeDerivativeData(0, 0, 0, gs);
        m.errorcode |= (int)KleinsErrorCodes::BAD_VALUES;
        return m;
    }
    m.computeDerivativeData(X, Y, Z, gs);
    return m;
}
Measurement Measurement::fromxyY(double x, double y, double Y, const GamutSpec &gs, int error) {
    if(y == 0) {
        Measurement m = fromXYZ(0, 0, 0, gs);
        m.errorcode |= (int)KleinsErrorCodes::BAD_VALUES;
        return m;
    }
    double bigX, bigZ;
    getXYZfromxyY(x, y, Y, bigX, bigZ);
    return fromXYZ(bigX, Y, bigZ, gs, error);
}
Measurement Measurement::fromuvprimeY(double u, double v, double Y, const GamutSpec &gs, int error) {
    if(u == 0 && v == 0) {
        return fromXYZ(0, 0, 0, gs);
    }
    double x = 9 * u / (6 * u - 16 * v + 12);
    double y = 4 * v / (6 * u - 16 * v + 12);
    return fromxyY(x, y, Y, gs, error);
}
Measurement Measurement::fromTempduvY(double _temp, double _tempduv, double Y, const GamutSpec &gs, int error) {
    double u, v, du, dv;
    if(!findOnCurve(_temp, blackbody, BLACKBODY_POINTS, u, v, du, dv)) {
        return fromXYZ(0, 0, 0, gs);
    }

    unitVector(du, dv);
    u += dv * _tempduv;
    v += -du * _tempduv;

    return fromuvprimeY(u, v * 3 / 2, Y, gs, error);
}
Measurement Measurement::fromnmduvY(double _nm, double _nmduv, double Y, const GamutSpec &gs, int error) {
    double u, v, du, dv;
    if(!findOnCurve(_nm, nmGamut, GAMUT_POINTS, u, v, du, dv)) {
        return fromXYZ(0, 0, 0, gs);
    }

    // white x,y 1/3,1/3 = u',v' 0.210526316,0.473684211
    du = 0.210526316 - u;
    dv = 0.473684211 - v;

    unitVector(du, dv);
    u += du * _nmduv;
    v += dv * _nmduv;

    return fromuvprimeY(u, v, Y, gs, error);
}
Measurement Measurement::fromRGB(double red, double green, double blue, const GamutSpec &gs, int error) {
    //Remove the percent
    red /= 100.;
    green /= 100.;
    blue /= 100.;
    //Calc
    double X = red * gs.getRGBtoXYZ().v[0][0] + green * gs.getRGBtoXYZ().v[0][1] + blue * gs.getRGBtoXYZ().v[0][2];
    double Y = red * gs.getRGBtoXYZ().v[1][0] + green * gs.getRGBtoXYZ().v[1][1] + blue * gs.getRGBtoXYZ().v[1][2];
    double Z = red * gs.getRGBtoXYZ().v[2][0] + green * gs.getRGBtoXYZ().v[2][1] + blue * gs.getRGBtoXYZ().v[2][2];

    return fromXYZ(X, Y, Z, gs, error);
}
Measurement Measurement::fromHSV(double hue, double saturation, double value, const GamutSpec &gs, int error) {

    //Hue and Saturation http://en.wikipedia.org/wiki/HSV_color_space
    //http://www.cs.rit.edu/~ncs/color/t_convert.html
    int i;
    double r, g, b;
    double f, p, q, t;
    if(saturation == 0) {
        // achromatic (grey)
        return fromRGB(value, value, value, gs);
    }
    double s = saturation / 100;
    double v = value / 100;
    hue /= 60;			// sector 0 to 5
    i = (int)hue;
    f = hue - i;			// factorial part of h
    p = v * (1 - s);
    q = v * (1 - s * f);
    t = v * (1 - s * (1 - f));
    switch(i) {
        case 0:
            r = v;
            g = t;
            b = p;
            break;
        case 1:
            r = q;
            g = v;
            b = p;
            break;
        case 2:
            r = p;
            g = v;
            b = t;
            break;
        case 3:
            r = p;
            g = q;
            b = v;
            break;
        case 4:
            r = t;
            g = p;
            b = v;
            break;
        default:		// case 5:
            r = v;
            g = p;
            b = q;
            break;
    }

    return fromRGB(r * 100, g * 100, b * 100, gs, error);
}
Measurement Measurement::fromLab(double L, double a, double b, const GamutSpec &gs, int error) {
    double whitex, whitey, whiteBigY, whiteBigX, whiteBigZ;
    gs.getWhite(whitex, whitey, whiteBigY);
    //Getting BigXYZ
    getXYZfromxyY(whitex, whitey, whiteBigY, whiteBigX, whiteBigZ);
    //Calcs - https://en.wikipedia.org/wiki/Lab_color_space
    double X, Y, Z;
    double LFactor = 1. / 116.*(L + 16.0);
    X = whiteBigX * invertLabF(LFactor + 1. / 500.*a);
    Y = whiteBigY * invertLabF(LFactor);
    Z = whiteBigZ * invertLabF(LFactor + 1. / 200.*b);

    return fromXYZ(X, Y, Z, gs, error);
}

void Measurement::setGamutSpec(const GamutSpec &gs) {
    computeDerivativeData(bigx, bigy, bigz, gs);
}
GamutSpec Measurement::getGamutSpec() const {
    return gs;
}

double Measurement::toNits(double FootLamberts) {
    return FootLamberts * nitsToFL;
}
double Measurement::toFootLamberts(double nits) {
    return nits / nitsToFL;
}

double Measurement::getCIE1931_x() const {
    return x;
}
double Measurement::getCIE1931_y() const {
    return y;
}
double Measurement::getBigX() const {
    return bigx;
}
double Measurement::getBigY() const {
    return bigy;
}
double Measurement::getBigZ() const {
    return bigz;
}
double Measurement::getBigXRaw() const {
    return bigxraw;
}
double Measurement::getBigYRaw() const {
    return bigyraw;
}
double Measurement::getBigZRaw() const {
    return bigzraw;
}
double Measurement::getRGB_Red() const {
    return red;
}
double Measurement::getRGB_Green() const {
    return green;
}
double Measurement::getRGB_Blue() const {
    return blue;
}
double Measurement::getCIE1974_u() const {
    return u;
}
double Measurement::getCIE1974_v() const {
    return v;
}
double Measurement::getWavelength_nm() const {
    return nm;
}
double Measurement::getWavelength_duv() const {
    return nmduv;
}
double Measurement::getLab_L()  const {
    return L;
}
double Measurement::getLab_a() const {
    return a;
}
double Measurement::getLab_b() const {
    return b;
}
double Measurement::getLCh_L()  const {
    return L;
}
double Measurement::getLCh_C() const {
    return C;
}
double Measurement::getLCh_h() const {
    return h;
}
double Measurement::getHSV_hue() const {
    return hue;
}
double Measurement::getHSV_saturation() const {
    return saturation;
}
double Measurement::getHSV_value() const {
    return value;
}
MeasurementRange Measurement::getRedRange() const {
    return redrange;
}
MeasurementRange Measurement::getGreenRange() const {
    return greenrange;
}
MeasurementRange Measurement::getBlueRange() const {
    return bluerange;
}
double Measurement::getColorTemputure_K() const {
    return temp;
}
double Measurement::getColorTemputure_duv() const {
    return tempduv;
}
unsigned int Measurement::getErrorCode() const {
    return errorcode;
}
int Measurement::getAveragingby() const {
    return averagingby;
}
double Measurement::getMinX() const {
    return minX;
}
double Measurement::getMaxX() const {
    return maxX;
}
double Measurement::getMinY() const {
    return minY;
}
double Measurement::getMaxY() const {
    return maxY;
}
double Measurement::getMinZ() const {
    return minZ;
}
double Measurement::getMaxZ() const {
    return maxZ;
}
Measurement::Measurement(const Measurement &m) {
    x = m.x;
    y = m.y;
    bigx = m.bigx;
    bigy = m.bigy;
    bigz = m.bigz;
    bigxraw = m.bigxraw;
    bigyraw = m.bigyraw;
    bigzraw = m.bigzraw;
    red = m.red;
    green = m.green;
    blue = m.blue;
    u = m.u;
    v = m.v;
    nm = m.nm;
    nmduv = m.nmduv;
    L = m.L;
    a = m.a;
    b = m.b;
    C = m.C;
    h = m.h;
    hue = m.hue;
    value = m.value;
    saturation = m.saturation;
    redrange = m.redrange;
    greenrange = m.greenrange;
    bluerange = m.bluerange;
    temp = m.temp;
    tempduv = m.tempduv;
    errorcode = m.errorcode;
    averagingby = m.averagingby;

    minX = m.minX;
    maxX = m.maxX;
    minY = m.minY;
    maxY = m.maxY;
    minZ = m.minZ;
    maxZ = m.maxZ;

    gs = GamutSpec::fromCode(GamutCode::defaultGamut);
}
Measurement::Measurement() {
    x = 0;
    y = 0;
    bigx = 0;
    bigy = 0;
    bigz = 0;
    bigxraw = 0;
    bigyraw = 0;
    bigzraw = 0;
    red = 0;
    green = 0;
    blue = 0;
    u = 0;
    v = 0;
    nm = 0;
    nmduv = 0;
    L = 0;
    a = 0;
    b = 0;
    C = 0;
    h = 0;
    hue = 0;
    value = 0;
    saturation = 0;
    redrange = MeasurementRange::range1;
    greenrange = MeasurementRange::range1;
    bluerange = MeasurementRange::range1;
    temp = 0;
    tempduv = 0;
    errorcode = 0;
    averagingby = 0;

    minX = maxX = 0;
    minY = maxY = 0;
    minZ = maxZ = 0;

    gs = GamutSpec::fromCode(GamutCode::defaultGamut);
}

void Measurement::computeDerivativeData(double _bigX, double _bigY, double _bigZ, const GamutSpec &_gs) {
    bigx = _bigX;
    bigy = _bigY;
    bigz = _bigZ;
    gs = _gs;

    double sum = bigx + bigy + bigz;
    //Storing the RGB
    red = bigx * gs.getXYZtoRGB().v[0][0] + bigy * gs.getXYZtoRGB().v[0][1] + bigz * gs.getXYZtoRGB().v[0][2];
    green = bigx * gs.getXYZtoRGB().v[1][0] + bigy * gs.getXYZtoRGB().v[1][1] + bigz * gs.getXYZtoRGB().v[1][2];
    blue = bigx * gs.getXYZtoRGB().v[2][0] + bigy * gs.getXYZtoRGB().v[2][1] + bigz * gs.getXYZtoRGB().v[2][2];
    //RGB in a percent
    red *= 100.;
    green *= 100.;
    blue *= 100.;

    if(sum == 0) {
        sum = 0.0000001;
    }
    x = bigx / sum;
    y = bigy / sum;

    double uv = -2 * x + 12 * y + 3;
    double vnotPrime;
    if(uv < 0.001) {
        u = 0;
        v = 0;
        vnotPrime = 0;
    } else {
        u = 4 * x / uv;
        v = 9 * y / uv;
        vnotPrime = 6 * y / uv;
    }

    //kelvin math with cubic splines
    nearestCurve(u, vnotPrime, blackbody, BLACKBODY_POINTS, temp, tempduv, .05, errorcode, (int)KleinsErrorCodes::KELVINS);

    //nm math with cubic splines
    // white x,y 1/3,1/3 = u',v' 0.210526316,0.473684211
    projectOntoCurve(u, v, 0.210526316, 0.473684211, nmGamut, GAMUT_POINTS, nm, nmduv, errorcode, (int)KleinsErrorCodes::CONVERTED_NM);

    //L*a*b*
    //Getting white spect
    double whitex, whitey, whiteY;
    _gs.getWhite(whitex, whitey, whiteY);
    //Getting BigXYZ
    double whiteBigX, whiteBigZ;
    getXYZfromxyY(whitex, whitey, whiteY, whiteBigX, whiteBigZ);
    //Calc
    double fx = labF(bigx / whiteBigX);
    double fy = labF(bigy / whiteY);
    double fz = labF(bigz / whiteBigZ);
    L = 116. * fy - 16.;
    a = 500. * (fx - fy);
    b = 200. * (fy - fz);

    //L*C*h*
    C = sqrt(a * a + b * b);
    h = atan2(b, a);

    //Hue and Saturation http://en.wikipedia.org/wiki/HSV_color_space
    value = max(max(red, green), blue);
    double minValue = min(min(red, green), blue);
    saturation = value - minValue;
    if(saturation != 0) {
        if(red == value) {
            hue = ((green - blue) / saturation);
            if(hue < 0.0) {
                hue += 6.0;
            }
        } else if(green == value) {
            hue = ((blue - red) / saturation) + 2.0;
        } else if(blue == value) {
            hue = ((red - green) / saturation) + 4.0;
        }
        saturation = (saturation / value)  * 100.0;
        hue *= 60.0;
        if(hue < 0) {
            hue += 360;
        }
        if(hue == 360
                || hue > 360) {
            hue -= 360;
        }
    } else {
        saturation = -1.0;
        hue = -1.0;
    }
}

//http://en.wikipedia.org/wiki/Color_difference
// 1 = reference/spec, 2 = other/this
double Measurement::deltaE1976(const Measurement &spec) const {
    double dL = L - spec.L;
    double da = a - spec.a;
    double db = b - spec.b;
    return sqrt(dL * dL + da * da + db * db);
}
double Measurement::deltaE1994(const Measurement &spec) const {
    double dL = spec.L - L;
    double da = spec.a - a;
    double db = spec.b - b;
    double dC = spec.C - C;
    double dH = sqrt(da * da + db * db - dC * dC);

    double SL = 1.;
    double SC = 1. + 0.045 * spec.C;
    double SH = 1. + 0.015 * spec.C;

    double v0 = dL / SL;
    double v1 = dC / SC;
    double v2 = dH / SH;

    return sqrt(v0 * v0 +
                v1 * v1 +
                v2 * v2);
}
double Measurement::deltaE2000(const Measurement &spec) const {
    // Implementing specifics from
    // http://www.ece.rochester.edu/~gsharma/ciede2000/ciede2000noteCRNA.pdf
    const Measurement *m[2] = {&spec, this};
    double degtorad = PI / 180.;
    double radtodeg = 180. / PI;

    //3
    double Cavg = (spec.C + C) / 2.;

    double Cavg7 = pow(Cavg, 7.);
    double pow25_7 = pow(25., 7.);
    //4
    double G = 0.5 * (1 - sqrt(Cavg7 / (Cavg7 + pow25_7)));

    double ap[2];
    double Cp[2];
    double hp[2]; //WARNING: this will be in degrees not radians
    for(int i = 0; i < 2; ++i) {
        //5
        ap[i] = (1. + G) * m[i]->a;
        //6
        Cp[i] = sqrt(ap[i] * ap[i] +
                     m[i]->b * m[i]->b);
        //7
        if(m[i]->b == 0 && ap[i] == 0) {
            hp[i] = 0;
        } else {
            hp[i] = atan2(m[i]->b, ap[i]);
        }
        //adjust from (-PI, PI) to (0, 360)
        if(hp[i] < 0) {
            hp[i] += 2.*PI;
        }
        hp[i] *= radtodeg;
    }

    //8
    double dLp = m[1]->L - m[0]->L;
    //9
    double dCp = Cp[1] - Cp[0];

    //10
    double dhp;
    if(Cp[0]*Cp[1] == 0) {
        dhp = 0;
    } else if(ABS(hp[1] - hp[0]) <= 180.) {
        dhp = (hp[1] - hp[0]);
    } else if(hp[1] - hp[0] > 180) {
        dhp = (hp[1] - hp[0]) - 360;
    } else {
        dhp = (hp[1] - hp[0]) + 360;
    }

    //11
    double dHp = 2. *
                 sqrt(Cp[0] * Cp[1]) *
                 sin((dhp / 2.) * degtorad);

    //12
    double Lavgp = (m[0]->L + m[1]->L) / 2.;
    //13
    double Cavgp = (Cp[0] + Cp[1]) / 2.;
    //14
    double havgp;
    if(Cp[0]*Cp[1] == 0) {
        havgp = (hp[0] + hp[1]);
    } else if(ABS(hp[0] - hp[1]) <= 180.) {
        havgp = (hp[0] + hp[1]) / 2.;
    } else if(hp[0] + hp[1] < 360) {
        havgp = (hp[0] + hp[1] + 360.) / 2.;
    } else {
        havgp = (hp[0] + hp[1] - 360.) / 2.;
    }

    //15
    double T = 1
               - 0.17 * cos((havgp - 30.) * degtorad)
               + 0.24 * cos((2.*havgp) * degtorad)
               + 0.32 * cos((3.*havgp + 6.) * degtorad)
               - 0.20 * cos((4.*havgp - 63.) * degtorad);
    //16
    double dhavgp275_25Thing = (havgp - 275.) / 25.;
    double dtheta = 30 * exp(-(dhavgp275_25Thing * dhavgp275_25Thing));
    //17
    double Cavgp7 = pow(Cavgp, 7.);
    double Rc = 2.*sqrt(Cavgp7 / (Cavgp7 + pow25_7));
    //18
    double dL50 = Lavgp - 50;
    double dL50sqrd = dL50 * dL50;
    double SL = 1. + (0.015 * dL50sqrd) / sqrt(20. + dL50sqrd);
    //19
    double SC = 1. + 0.045 * Cavgp;
    //20
    double SH = 1. + 0.015 * Cavgp * T;
    //21
    double Rt = -sin(2 * dtheta * degtorad) * Rc;

    //22
    double v0 = dLp / SL;
    double v1 = dCp / SC;
    double v2 = dHp / SH;
    double v3 = Rt * v1 * v2;

    double dE00 = sqrt(v0 * v0 +
                       v1 * v1 +
                       v2 * v2 +
                       v3);
    return dE00;
}
